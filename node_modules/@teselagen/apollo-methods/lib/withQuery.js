"use strict";

exports.__esModule = true;
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _reactApollo = require("react-apollo");

var _lodash = require("lodash");

var _pluralize = require("pluralize");

var _pluralize2 = _interopRequireDefault(_pluralize);

var _recompose = require("recompose");

var _generateQuery = require("./utils/generateQuery");

var _generateQuery2 = _interopRequireDefault(_generateQuery);

var _generateFragmentWithFields = require("./utils/generateFragmentWithFields");

var _generateFragmentWithFields2 = _interopRequireDefault(_generateFragmentWithFields);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 * withQuery
 * @param {gql fragment} fragment supply a fragment as the first argument
 * @param {options} options
 * @typedef {object} options
 * @property {boolean} isPlural Are we searching for 1 thing or many?
 * @property {string} queryName What the props come back on ( by default = modelName + 'Query')
 * @property {boolean} asFunction If true, this gives you back a function you can call directly instead of a HOC
 * @property {boolean} asQueryObj If true, this gives you back the gql query object aka gql`query myQuery () {}`
 * @property {string} idAs By default single record queries occur on an id. But, if the record doesn't have an id field, and instead has a 'code', you can set idAs: 'code'
 * @property {boolean} getIdFromParams Grab the id variable off the match.params object being passed in!
 * @property {boolean || string} showLoading Show a loading spinner over the whole component while the data is loading
 * @property {boolean} showError Default=true show an error message toastr if the an error occurs while loading the data
 * @return {props}: {xxxxQuery, data }
 */

function withQuery(inputFragment) {
  var _options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var isPlural = _options.isPlural,
      asFunction = _options.asFunction,
      asQueryObj = _options.asQueryObj,
      LoadingComp = _options.LoadingComp,
      nameOverride = _options.nameOverride,
      client = _options.client,
      variables = _options.variables,
      _props = _options.props,
      queryName = _options.queryName,
      getIdFromParams = _options.getIdFromParams,
      _options$showError = _options.showError,
      showError = _options$showError === undefined ? true : _options$showError,
      showLoading = _options.showLoading,
      inDialog = _options.inDialog,
      queryOptions = _options.options,
      withLoadingHoc = _options.withLoadingHoc,
      rest = _objectWithoutProperties(_options, ["isPlural", "asFunction", "asQueryObj", "LoadingComp", "nameOverride", "client", "variables", "props", "queryName", "getIdFromParams", "showError", "showLoading", "inDialog", "options", "withLoadingHoc"]);

  var fragment = Array.isArray(inputFragment) ? _generateFragmentWithFields2.default.apply(undefined, inputFragment) : inputFragment;

  var gqlQuery = (0, _generateQuery2.default)(fragment, _options);
  var modelName = (0, _lodash.get)(fragment, "definitions[0].typeCondition.name.value");
  var nameToUse = nameOverride || (isPlural ? (0, _pluralize2.default)(modelName) : modelName);
  var queryNameToUse = queryName || nameToUse + "Query";
  var getRes = function getRes(_res) {
    var res = _res && _res.body || _res;
    var toReturn = isPlural ? [].concat(res.data[nameToUse].results) : res.data[nameToUse];
    if (isPlural) {
      toReturn.totalResults = res.data[nameToUse].totalResults;
    }
    return toReturn;
  };
  if (asQueryObj) {
    return [gqlQuery, getRes, nameToUse, queryNameToUse];
  }
  if (asFunction) {
    if (!client) return console.error("You need to pass the apollo client to withQuery if using as a function");

    return function query(localVars) {
      return client.query(_extends({
        query: gqlQuery,
        name: "createDataFile",
        ssr: false,
        fetchPolicy: "network-only"
      }, queryOptions, {
        variables: localVars || variables || queryOptions && queryOptions.variables || undefined
      })).then(getRes);
    };
  }

  var tableParamHandlers = {
    selectTableRecords: function selectTableRecords(props) {
      return function (ids, keepOldEntities) {
        var _props$tableParams = props.tableParams,
            entities = _props$tableParams.entities,
            selectedEntities = _props$tableParams.selectedEntities,
            changeFormValue = _props$tableParams.changeFormValue;

        setTimeout(function () {
          var key = (0, _lodash.get)(entities, "[0].code") ? "code" : "id";
          var entitiesById = (0, _lodash.keyBy)(entities, key);
          var newIdMap = _extends({}, keepOldEntities && selectedEntities);
          ids.forEach(function (id) {
            var entity = entitiesById[id];
            if (!entity) return;
            newIdMap[id] = {
              entity: entity
            };
          });
          changeFormValue("reduxFormSelectedEntityIdMap", newIdMap);
        });
      };
    }
  };

  return (0, _recompose.compose)((0, _reactApollo.graphql)(gqlQuery, _extends({
    //default options
    options: function options(props) {
      var variables = getVariables(props, queryOptions, _extends({}, _options, {
        queryNameToUse: queryNameToUse
      }));
      var fetchPolicy = props.fetchPolicy,
          pollInterval = props.pollInterval,
          notifyOnNetworkStatusChange = props.notifyOnNetworkStatusChange;

      var extraOptions = queryOptions || {};
      if (typeof queryOptions === "function") {
        extraOptions = queryOptions(props) || {};
      }

      var _extraOptions = extraOptions,
          extraOptionVariables = _extraOptions.variables,
          otherExtraOptions = _objectWithoutProperties(_extraOptions, ["variables"]);

      if ((0, _lodash.get)(variables, "filter.entity") && (0, _lodash.get)(variables, "filter.__objectType") === "query" && (0, _lodash.get)(variables, "filter.entity") !== modelName) {
        console.error("filter model does not match fragment model!");
      }

      return _extends({}, !(0, _lodash.isEmpty)(variables) && { variables: variables }, {
        fetchPolicy: fetchPolicy || "network-only",
        ssr: false,
        pollInterval: pollInterval,
        notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,
        // This will refetch queries whose data has been messed up by other cache updates. https://github.com/apollographql/react-apollo/pull/2003
        partialRefetch: true
      }, otherExtraOptions);
    },
    props: function props() {
      var _extends2, _extends3;

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var _args$ = args[0],
          data = _args$.data,
          ownProps = _args$.ownProps;
      var tableParams = ownProps.tableParams;

      var results = (0, _lodash.get)(data, nameToUse + (isPlural ? ".results" : ""));
      var totalResults = isPlural ? (0, _lodash.get)(data, nameToUse + ".totalResults", 0) : results && 1;
      var newData = _extends({}, data, (_extends2 = {
        totalResults: totalResults,
        //adding these for consistency with withItemsQuery
        entities: results,
        entityCount: totalResults
      }, _extends2["error" + (0, _lodash.upperFirst)(nameToUse)] = data.error, _extends2["loading" + (0, _lodash.upperFirst)(nameToUse)] = data.loading, _extends2));

      var variables = getVariables(ownProps, queryOptions, _extends({}, _options, {
        queryNameToUse: queryNameToUse
      }));

      var newTableParams = void 0;
      if (tableParams && !tableParams.entities && !tableParams.isLoading) {
        var entities = results;

        newTableParams = _extends({}, tableParams, {
          isLoading: data.loading,
          entities: entities,
          entityCount: totalResults,
          onRefresh: data.refetch,
          variables: variables,
          fragment: fragment
        });
      }

      var propsToReturn = _extends({}, newTableParams && { tableParams: newTableParams }, (_extends3 = {
        data: newData
      }, _extends3[queryNameToUse] = newData, _extends3[nameToUse] = results, _extends3[nameToUse + "Error"] = data.error, _extends3[nameToUse + "Loading"] = data.loading, _extends3[nameToUse + "Count"] = totalResults, _extends3[(0, _lodash.camelCase)("refetch_" + nameToUse)] = data.refetch, _extends3.fragment = fragment, _extends3.gqlQuery = gqlQuery, _extends3));

      var dataArgs = args[0],
          otherArgs = args.slice(1);

      return _extends({}, propsToReturn, _props && _props.apply(undefined, [_extends({}, dataArgs, propsToReturn)].concat(otherArgs)));
    }
  }, rest) //overwrite defaults here
  ), (0, _recompose.branch)(function (props) {
    return props.tableParams;
  }, (0, _recompose.withHandlers)(tableParamHandlers)), (0, _recompose.branch)(function () {
    return !!withLoadingHoc;
  }, withLoadingHoc && withLoadingHoc({ showError: showError, showLoading: showLoading, queryNameToUse: queryNameToUse, inDialog: inDialog })));
}

exports.default = withQuery;
function getVariables(ownProps, queryOptions, options) {
  var propVariables = ownProps.variables;
  var getIdFromParams = options.getIdFromParams,
      queryNameToUse = options.queryNameToUse,
      variables = options.variables;

  var id = void 0;
  if (getIdFromParams) {
    id = parseInt((0, _lodash.get)(ownProps, "match.params.id"), 10);
    if (!id) {
      console.error("There needs to be an id passed here to ", queryNameToUse, "but none was found");
      debugger; // eslint-disable-line
      // to prevent crash
      id = -1;
    }
  }
  var extraOptions = queryOptions || {};
  if (typeof queryOptions === "function") {
    extraOptions = queryOptions(ownProps) || {};
  }

  var _extraOptions2 = extraOptions,
      extraOptionVariables = _extraOptions2.variables;

  return _extends({}, getIdFromParams && { id: id }, variables, propVariables, extraOptionVariables && extraOptionVariables);
}
module.exports = exports["default"];