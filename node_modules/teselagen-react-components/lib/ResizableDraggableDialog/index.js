"use strict";

exports.__esModule = true;
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _class, _temp, _initialiseProps; // import Rnd from "react-rnd";


var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _core = require("@blueprintjs/core");

var _reactRnd = require("react-rnd");

var _reactRnd2 = _interopRequireDefault(_reactRnd);

require("./style.css");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ResizableDraggableDialog = (_temp = _class = function (_React$Component) {
  _inherits(ResizableDraggableDialog, _React$Component);

  function ResizableDraggableDialog(props) {
    _classCallCheck(this, ResizableDraggableDialog);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _initialiseProps.call(_this);

    var _this$props = _this.props,
        _this$props$width = _this$props.width,
        defaultDialogWidth = _this$props$width === undefined ? 400 : _this$props$width,
        _this$props$height = _this$props.height,
        defaultDialogHeight = _this$props$height === undefined ? 450 : _this$props$height;

    var _this$getWindowWidthA = _this.getWindowWidthAndHeight(),
        windowWidth = _this$getWindowWidthA.windowWidth,
        windowHeight = _this$getWindowWidthA.windowHeight;

    _this.state = {
      x: Math.round(Math.max((windowWidth - defaultDialogWidth) / 2, 0)),
      y: Math.round(Math.max((windowHeight - defaultDialogHeight) / 2, 0))
    };
    return _this;
  }

  ResizableDraggableDialog.prototype.render = function render() {
    var _props = this.props,
        _props$width = _props.width,
        defaultDialogWidth = _props$width === undefined ? 400 : _props$width,
        _props$height = _props.height,
        defaultDialogHeight = _props$height === undefined ? 450 : _props$height,
        RndProps = _props.RndProps,
        rest = _objectWithoutProperties(_props, ["width", "height", "RndProps"]);

    var _getWindowWidthAndHei = this.getWindowWidthAndHeight(),
        windowWidth = _getWindowWidthAndHei.windowWidth,
        windowHeight = _getWindowWidthAndHei.windowHeight;

    return _react2.default.createElement(
      "div",
      {
        className: "tg-bp3-dialog-resizable-draggable",
        style: { top: 0, left: 0, position: "fixed" }
      },
      _react2.default.createElement(
        _reactRnd2.default,
        _extends({
          onDragStop: this.onDragStop,
          position: { x: this.state.x, y: this.state.y },
          enableResizing: {
            bottomLeft: true,
            bottomRight: true,
            topLeft: true,
            topRight: true
          },
          maxHeight: windowHeight,
          maxWidth: windowWidth
          // minWidth={Math.min(defaultDialogWidth, 300) }
          // minHeight={Math.min(defaultDialogHeight, 200) }
          , bounds: "window",
          "default": {
            width: Math.min(defaultDialogWidth, windowWidth),
            height: Math.min(defaultDialogHeight, windowHeight)
          }
          // default={{ //tnrtodo - implement this once strml merges my pr..
          //   x: "50%",
          //   y: "50%",
          // }}
          , dragHandleClassName: _core.Classes.DIALOG_HEADER
        }, RndProps),
        _react2.default.createElement(_core.Dialog, _extends({
          enforceFocus: false,
          hasBackdrop: false,
          usePortal: false
        }, rest))
      )
    );
  };

  return ResizableDraggableDialog;
}(_react2.default.Component), _initialiseProps = function _initialiseProps() {
  var _this2 = this;

  this.getWindowWidthAndHeight = function () {
    var w = window,
        d = document,
        e = d.documentElement,
        g = d.getElementsByTagName("body")[0],
        windowWidth = w.innerWidth || e.clientWidth || g.clientWidth,
        windowHeight = w.innerHeight || e.clientHeight || g.clientHeight;
    return {
      windowWidth: windowWidth,
      windowHeight: windowHeight
    };
  };

  this.onDragStop = function (e, d) {
    _this2.setState({ x: Math.round(d.x), y: Math.round(d.y) });
  };
}, _temp);
exports.default = ResizableDraggableDialog;
module.exports = exports["default"];