"use strict";

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _class2, _temp2;

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _lodash = require("lodash");

var _select = require("@blueprintjs/select");

var _fuzzysearch = require("fuzzysearch");

var _fuzzysearch2 = _interopRequireDefault(_fuzzysearch);

require("./style.css");

var _core = require("@blueprintjs/core");

var _menuUtils = require("../utils/menuUtils");

var _hotkeyUtils = require("../utils/hotkeyUtils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MenuBar = (0, _core.HotkeysTarget)(_class = (_temp2 = _class2 = function (_React$Component) {
  _inherits(MenuBar, _React$Component);

  function MenuBar() {
    var _temp, _this, _ret;

    _classCallCheck(this, MenuBar);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = { searchVal: "", isOpen: false, openIndex: null }, _this.handleInteraction = function (index) {
      return function (newOpenState) {
        if (!newOpenState && index !== _this.state.openIndex) {
          return; //return early because the "close" is being fired by another popover
        }
        _this.setState({
          isOpen: newOpenState,
          openIndex: newOpenState ? index : null
        });
      };
    }, _this.handleMouseOver = function (index) {
      return function () {
        var isOpen = _this.state.isOpen;

        if (isOpen) {
          _this.setState({
            openIndex: index
          });
        }
      };
    }, _this.addHelpItemIfNecessary = function (menu, i) {
      return menu.map(function (item, innerIndex) {
        var isMenuSearch = item.isMenuSearch,
            inputProps = item.inputProps,
            rest = _objectWithoutProperties(item, ["isMenuSearch", "inputProps"]);

        if (isMenuSearch) {
          var isTopLevelSearch = !(0, _lodash.isNumber)(i);
          _this.isTopLevelSearch = isTopLevelSearch;
          _this.menuSearchIndex = isTopLevelSearch ? innerIndex : i;

          return {
            shouldDismissPopover: false,
            text: _react2.default.createElement(_select.Suggest, _extends({
              closeOnSelect: false,
              items: _this.allMenuItems,
              itemListPredicate: filterMenuItems,
              itemDisabled: function itemDisabled(i) {
                return i.disabled;
              },
              popoverProps: {
                minimal: true,
                popoverClassName: "tg-menu-search-suggestions"
              },
              resetOnSelect: false,
              resetOnClose: false,
              inputProps: _extends({
                inputRef: function inputRef(n) {
                  if (n) {
                    _this.searchInput = n;
                    n.setAttribute && n.setAttribute("size", n.getAttribute("placeholder").length);
                  }
                },
                autoFocus: !isTopLevelSearch,
                placeholder: "Search the menus (" + (0, _hotkeyUtils.comboToLabel)(_this.props.menuSearchHotkey || menuSearchHotkey, false).replace(/\s/g, "") + ")"
              }, inputProps),
              initialContent: null,
              onItemSelect: _this.handleItemClickOrSelect(),
              inputValueRenderer: function inputValueRenderer(i) {
                return i.text;
              },
              noResults: _react2.default.createElement(
                "div",
                null,
                "No Results..."
              ),
              itemRenderer: _this.itemRenderer
            }, rest))
          };
        } else {
          return item;
        }
      });
    }, _this.itemRenderer = function (i, b) {
      // if (i.submenu.length === 3) debugger;
      return _react2.default.createElement(_menuUtils.DynamicMenuItem, _extends({
        key: b.index
      }, {
        doNotEnhanceTopLevelItem: true,
        enhancers: _this.props.enhancers,
        def: {
          submenu: i.submenu,
          icon: i.icon,
          disabled: i.disabled,
          text: i.isSimpleText ? i.justText || i.text : i.text,
          label: i.path.length && _react2.default.createElement(
            "span",
            { style: { fontSize: 8 } },
            (0, _lodash.flatMap)(i.path, function (el, i2) {
              if (i2 === 0) return el;
              return [" > ", el];
            })
          ),
          onClick: _this.handleItemClickOrSelect(i),
          active: b.modifiers.active
          // shouldDismissPopover: true,
        }
      }));
    }, _this.handleItemClickOrSelect = function (__i) {
      return function (_i) {
        var i = __i || _i;
        if (!i.onClick) return;
        !i.disabled && i.onClick();
        if (i.shouldDismissPopover !== false) {
          _this.setState({ isOpen: false });
        } else {
          if (_i && _i.stopPropagation) {
            _i.stopPropagation();
            _i.preventDefault();
          }
        }
      };
    }, _this.toggleFocusSearchMenu = function () {
      //toggle off
      if (_this.searchInput && document.activeElement === _this.searchInput) {
        _this.searchInput.blur();
        _this.setState({
          isOpen: false,
          openIndex: _this.menuSearchIndex
        });
      } else {
        //toggle on
        if (_this.isTopLevelSearch) {
          _this.searchInput && _this.searchInput.focus();
        } else {
          _this.setState({
            isOpen: true,
            openIndex: _this.menuSearchIndex
          });
        }
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  MenuBar.prototype.renderHotkeys = function renderHotkeys() {
    return _react2.default.createElement(
      _core.Hotkeys,
      null,
      (0, _lodash.isNumber)(this.menuSearchIndex) && _react2.default.createElement(_core.Hotkey, {
        allowInInput: true,
        global: true,
        combo: this.props && this.props.menuSearchHotkey || menuSearchHotkey,
        label: "Search the menu",
        preventDefault: true,
        stopPropagation: true,
        onKeyDown: this.toggleFocusSearchMenu
      })
    );
  };

  MenuBar.prototype.render = function render() {
    var _this2 = this;

    var _props = this.props,
        className = _props.className,
        style = _props.style,
        menu = _props.menu,
        enhancers = _props.enhancers,
        extraContent = _props.extraContent;
    var _state = this.state,
        isOpen = _state.isOpen,
        openIndex = _state.openIndex;

    return _react2.default.createElement(
      "div",
      { className: "tg-menu-bar " + className, style: style },
      this.addHelpItemIfNecessary(menu).map(function (topLevelItem, i) {
        var dataKeys = (0, _lodash.pickBy)(topLevelItem, function (value, key) {
          return (0, _lodash.startsWith)(key, "data-");
        });

        // Support enhancers for top level items too
        topLevelItem = enhancers.reduce(function (v, f) {
          return f(v);
        }, topLevelItem);

        if (topLevelItem.hidden) {
          return null;
        }

        var button = _react2.default.createElement(
          _core.Button,
          _extends({}, dataKeys, { //spread all data-* attributes
            key: i,
            minimal: true,
            className: "tg-menu-bar-item",
            onClick: topLevelItem.onClick,
            disabled: topLevelItem.disabled,
            onMouseOver: topLevelItem.submenu ? _this2.handleMouseOver(i) : noop
          }),
          topLevelItem.text
        );
        return !topLevelItem.submenu ? button : _react2.default.createElement(
          _core.Popover,
          {
            autoFocus: false,
            key: i,
            minimal: true,
            canEscapeKeyClose: true,
            onClosed: function onClosed() {
              _this2.props.onMenuClose && _this2.props.onMenuClose();
            },
            portalClassName: "tg-menu-bar-popover",
            position: _core.Position.BOTTOM_LEFT,
            isOpen: isOpen && i === openIndex,
            onInteraction: _this2.handleInteraction(i),
            content: _react2.default.createElement(
              _core.Menu,
              null,
              (0, _menuUtils.createDynamicMenu)(_this2.addHelpItemIfNecessary(topLevelItem.submenu, i), enhancers)
            ),
            transitionDuration: 0,
            style: {
              transition: "none"
            },
            inline: true
          },
          button
        );
      }),
      extraContent
    );
  };

  _createClass(MenuBar, [{
    key: "allMenuItems",
    get: function get() {
      var _props2 = this.props,
          menu = _props2.menu,
          enhancers = _props2.enhancers,
          context = _props2.context;

      return getAllMenuTextsAndHandlers(menu, enhancers, context);
    }
    // itemRenderer = (i, b) => {
    //   return (
    //     <MenuItem
    //       key={b.index}
    //       {...{
    //         // ...i,
    //         icon: i.icon,
    //         text: i.isSimpleText ? i.justText || i.text : i.text,
    //         label: i.path.length && (
    //           <span style={{ fontSize: 8 }}>
    //             {flatMap(i.path, (el, i2) => {
    //               if (i2 === 0) return el;
    //               return [" > ", el];
    //             })}
    //           </span>
    //         ),
    //         onClick: this.handleItemClickOrSelect(i),
    //         active: b.modifiers.active
    //         // shouldDismissPopover: true,
    //       }}
    //     />
    //   );
    // };

  }]);

  return MenuBar;
}(_react2.default.Component), _class2.defaultProps = {
  className: "",
  style: {}
}, _temp2)) || _class;

function noop() {}

var isDivider = function isDivider(item) {
  return item.divider !== undefined;
};

function getAllMenuTextsAndHandlers(menu, enhancers, context) {
  var path = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

  if (!menu) return [];
  return (0, _lodash.flatMap)(menu, function (item) {
    var enhancedItem = [].concat(enhancers).reduce(function (v, f) {
      return f(v, context);
    }, item);
    if (isDivider(enhancedItem)) {
      return [];
    }
    if (enhancedItem && enhancedItem.hidden) return [];
    return [_extends({}, enhancedItem, {
      path: path
    })].concat(getAllMenuTextsAndHandlers(enhancedItem.submenu, enhancers, context, [].concat(path, [enhancedItem.text])));
  });
}

var filterMenuItems = function filterMenuItems(searchVal, items) {
  var newItems = (0, _lodash.flatMap)(items, function (item) {
    var text = item.text,
        onClick = item.onClick,
        hidden = item.hidden,
        hideFromMenuSearch = item.hideFromMenuSearch,
        showInSearchMenu = item.showInSearchMenu;

    if (!showInSearchMenu && (!text || !onClick || !searchVal || hideFromMenuSearch || hidden)) return [];
    //fix this to use some smart regex
    var justText = text;
    var isSimpleText = true;
    if (!text.toLowerCase) {
      if (text.props) {
        isSimpleText = false;
        justText = getStringFromReactComponent(text);
      } else {
        return [];
      }
    }

    if ((0, _fuzzysearch2.default)(searchVal.toLowerCase(), justText && justText.toLowerCase())) {
      return _extends({}, item, {
        justText: justText,
        isSimpleText: isSimpleText
      });
    } else {
      return [];
    }
  }).sort(function (a, b) {
    return a.justText.length - b.justText.length;
  });

  return (0, _lodash.take)(newItems, 10).map(function (i) {
    return _extends({}, i, {
      justText: highlight(searchVal, i.justText)
    });
  });
};

function getStringFromReactComponent(comp) {
  if (!comp) return "";
  if ((0, _lodash.isString)(comp) || (0, _lodash.isNumber)(comp)) return comp;

  var _ref = comp.props || {},
      children = _ref.children;

  if (!children) return "";
  if ((0, _lodash.isArray)(children)) return (0, _lodash.flatMap)(children, getStringFromReactComponent).join("");
  if ((0, _lodash.isString)(children)) return children;

  if (children.props) {
    return getStringFromReactComponent(children.props);
  }
}

var menuSearchHotkey = "meta+/";

function highlight(query, text, opts) {
  opts = opts || { tag: _react2.default.createElement("strong", null) };

  if (query.length === 0) {
    return text;
  }

  var offset = text.toLowerCase().indexOf(query[0].toLowerCase());
  if (offset === -1) return null;

  var last = 0;
  for (var i = 1; i < query.length; i++) {
    if (text[offset + i] !== query[i]) {
      break;
    }

    last = i;
  }

  var before = text.slice(0, offset);
  var match = _react2.default.createElement(
    "strong",
    null,
    text.slice(offset, offset + last + 1)
  );

  var after = highlight(query.slice(last + 1), text.slice(offset + last + 1), opts);

  return (0, _lodash.flatten)([before, match, after]);
}
exports.default = MenuBar;
module.exports = exports["default"];