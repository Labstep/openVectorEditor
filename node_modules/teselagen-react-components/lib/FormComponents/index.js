"use strict";

exports.__esModule = true;
exports.ReactColorField = exports.SelectField = exports.ReactSelectField = exports.RadioGroupField = exports.NumericInputField = exports.EditableTextField = exports.TextareaField = exports.SwitchField = exports.CheckboxField = exports.DateRangeInputField = exports.DateInputField = exports.FileUploadField = exports.InputField = exports.withAbstractWrapper = exports.RenderReactColorPicker = exports.renderBlueprintRadioGroup = exports.renderBlueprintNumericInput = exports.renderSelect = exports.BPSelect = exports.renderReactSelect = exports.renderBlueprintEditableText = exports.renderBlueprintTextarea = exports.renderFileUpload = exports.renderBlueprintSwitch = exports.renderBlueprintCheckbox = exports.renderBlueprintInput = exports.renderBlueprintDateRangeInput = exports.renderBlueprintDateInput = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _class, _temp2, _initialiseProps;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; //tnr TODO: export this from json.sortify when https://github.com/ThomasR/JSON.sortify/issues/11 is resolved


exports.generateField = generateField;

var _classnames = require("classnames");

var _classnames2 = _interopRequireDefault(_classnames);

var _reactColor = require("react-color");

var _lodash = require("lodash");

var _mathExpressionEvaluator = require("math-expression-evaluator");

var _mathExpressionEvaluator2 = _interopRequireDefault(_mathExpressionEvaluator);

var _deepEqual = require("deep-equal");

var _deepEqual2 = _interopRequireDefault(_deepEqual);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _reduxForm = require("redux-form");

require("./style.css");

var _core = require("@blueprintjs/core");

var _datetime = require("@blueprintjs/datetime");

var _TgSelect = require("../TgSelect");

var _TgSelect2 = _interopRequireDefault(_TgSelect);

var _InfoHelper = require("../InfoHelper");

var _InfoHelper2 = _interopRequireDefault(_InfoHelper);

var _getMomentFormatter = require("../utils/getMomentFormatter");

var _getMomentFormatter2 = _interopRequireDefault(_getMomentFormatter);

var _Uploader = require("./Uploader");

var _Uploader2 = _interopRequireDefault(_Uploader);

var _sortify = require("./sortify");

var _sortify2 = _interopRequireDefault(_sortify);

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function getIntent(_ref) {
  var showErrorIfUntouched = _ref.showErrorIfUntouched,
      _ref$meta = _ref.meta,
      touched = _ref$meta.touched,
      error = _ref$meta.error,
      warning = _ref$meta.warning;

  var hasError = (touched || showErrorIfUntouched) && error;
  var hasWarning = (touched || showErrorIfUntouched) && warning;
  if (hasError) {
    return _core.Intent.DANGER;
  } else if (hasWarning) {
    return _core.Intent.WARNING;
  }
}

function getIntentClass() {
  var intent = getIntent.apply(undefined, arguments);
  if (intent === _core.Intent.DANGER) {
    return _core.Classes.INTENT_DANGER;
  } else if (intent === _core.Intent.WARNING) {
    return _core.Classes.INTENT_WARNING;
  } else {
    return "";
  }
}

function removeUnwantedProps(props) {
  var cleanedProps = _extends({}, props);
  delete cleanedProps.className;
  delete cleanedProps.units;
  delete cleanedProps.inlineLabel;
  delete cleanedProps.showErrorIfUntouched;
  delete cleanedProps.onChange;
  delete cleanedProps.containerStyle;
  delete cleanedProps.onFieldSubmit;
  delete cleanedProps.onBlur;
  delete cleanedProps.intent;
  delete cleanedProps.intentClass;
  delete cleanedProps.meta;
  delete cleanedProps.defaultValue;
  delete cleanedProps.enableReinitialize;
  delete cleanedProps.tabIndex;
  delete cleanedProps.secondaryLabel;
  delete cleanedProps.tooltipError;
  delete cleanedProps.tooltipInfo;
  delete cleanedProps.tooltipProps;
  if (cleanedProps.inputClassName) {
    cleanedProps.className = cleanedProps.inputClassName;
    delete cleanedProps.inputClassName;
  }
  return cleanedProps;
}

var AbstractInput = function (_React$Component) {
  _inherits(AbstractInput, _React$Component);

  function AbstractInput() {
    _classCallCheck(this, AbstractInput);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  AbstractInput.prototype.UNSAFE_componentWillMount = function UNSAFE_componentWillMount() {
    var _props = this.props,
        _props$meta = _props.meta,
        dispatch = _props$meta.dispatch,
        form = _props$meta.form,
        defaultValue = _props.defaultValue,
        enableReinitialize = _props.enableReinitialize,
        _props$input = _props.input,
        name = _props$input.name,
        value = _props$input.value;

    (value !== false && !value || enableReinitialize) && defaultValue !== undefined && dispatch({
      type: "@@redux-form/CHANGE",
      meta: {
        form: form,
        field: name
      },
      payload: defaultValue
    });
  };

  AbstractInput.prototype.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(_ref2) {
    var _ref2$meta = _ref2.meta,
        dispatch = _ref2$meta.dispatch,
        form = _ref2$meta.form,
        defaultValue = _ref2.defaultValue,
        _ref2$input = _ref2.input,
        name = _ref2$input.name,
        value = _ref2$input.value;
    var _props2 = this.props,
        oldDefaultValue = _props2.defaultValue,
        enableReinitialize = _props2.enableReinitialize;

    if ((value !== false && !value || enableReinitialize) && !(0, _deepEqual2.default)(defaultValue, oldDefaultValue)) {
      dispatch({
        type: "@@redux-form/CHANGE",
        meta: {
          form: form,
          field: name
        },
        payload: defaultValue
      });
    }
  };

  AbstractInput.prototype.render = function render() {
    var _props3 = this.props,
        children = _props3.children,
        tooltipProps = _props3.tooltipProps,
        tooltipError = _props3.tooltipError,
        disabled = _props3.disabled,
        intent = _props3.intent,
        tooltipInfo = _props3.tooltipInfo,
        label = _props3.label,
        inlineLabel = _props3.inlineLabel,
        secondaryLabel = _props3.secondaryLabel,
        className = _props3.className,
        showErrorIfUntouched = _props3.showErrorIfUntouched,
        meta = _props3.meta,
        containerStyle = _props3.containerStyle,
        noOuterLabel = _props3.noOuterLabel,
        input = _props3.input,
        noFillField = _props3.noFillField;
    var touched = meta.touched,
        error = meta.error,
        warning = meta.warning;

    var showError = (touched || showErrorIfUntouched) && error;
    var showWarning = (touched || showErrorIfUntouched) && warning;
    var componentToWrap = tooltipError ? _react2.default.createElement(
      _core.Tooltip,
      _extends({
        disabled: !showError,
        intent: error ? "danger" : "warning",
        content: error || warning,
        position: _core.Position.TOP
      }, tooltipProps),
      children
    ) : children;
    var testClassName = "tg-test-" + (0, _lodash.kebabCase)(input.name);
    if (noFillField) {
      componentToWrap = _react2.default.createElement(
        "div",
        { className: "tg-no-fill-field" },
        componentToWrap
      );
    }

    var helperText = void 0;
    if (!tooltipError) {
      if (showError) {
        helperText = error;
      } else if (showWarning) {
        helperText = warning;
      }
    }

    return _react2.default.createElement(
      _core.FormGroup,
      {
        className: (0, _classnames2.default)(className, testClassName, {
          "tg-tooltipError": tooltipError
        }),
        disabled: disabled,
        helperText: helperText,
        intent: intent,
        label: !noOuterLabel && (tooltipInfo ? _react2.default.createElement(
          "div",
          { style: { display: "flex" } },
          label,
          " ",
          _react2.default.createElement(_InfoHelper2.default, {
            style: { marginLeft: "5px", marginTop: "-6px" },
            size: 12,
            content: tooltipInfo
          })
        ) : label),
        inline: inlineLabel,
        labelInfo: secondaryLabel,
        style: containerStyle
      },
      componentToWrap
    );
  };

  return AbstractInput;
}(_react2.default.Component);

var renderBlueprintDateInput = function renderBlueprintDateInput(props) {
  var input = props.input,
      intent = props.intent,
      onFieldSubmit = props.onFieldSubmit,
      inputProps = props.inputProps,
      rest = _objectWithoutProperties(props, ["input", "intent", "onFieldSubmit", "inputProps"]);

  return _react2.default.createElement(_datetime.DateInput, _extends({}, (0, _getMomentFormatter2.default)("MM/DD/YYYY"), removeUnwantedProps(rest), {
    intent: intent,
    inputProps: inputProps
  }, input, {
    value: input.value ? new Date(input.value) : undefined,
    onChange: function onChange(selectedDate) {
      input.onChange(selectedDate);
      onFieldSubmit(selectedDate);
    }
  }));
};

exports.renderBlueprintDateInput = renderBlueprintDateInput;
var renderBlueprintDateRangeInput = function renderBlueprintDateRangeInput(props) {
  var input = props.input,
      intent = props.intent,
      onFieldSubmit = props.onFieldSubmit,
      inputProps = props.inputProps,
      rest = _objectWithoutProperties(props, ["input", "intent", "onFieldSubmit", "inputProps"]);

  return _react2.default.createElement(_datetime.DateRangeInput, _extends({}, (0, _getMomentFormatter2.default)("MM/DD/YYYY"), removeUnwantedProps(rest), {
    intent: intent,
    inputProps: inputProps
  }, input, {
    value: input.value ? [new Date(input.value[0]), new Date(input.value[1])] : undefined,
    onChange: function onChange(selectedDate) {
      input.onChange(selectedDate);
      onFieldSubmit(selectedDate);
    }
  }));
};

exports.renderBlueprintDateRangeInput = renderBlueprintDateRangeInput;
var renderBlueprintInput = function renderBlueprintInput(props) {
  var input = props.input,
      intent = props.intent,
      onFieldSubmit = props.onFieldSubmit,
      _props$onKeyDown = props.onKeyDown,
      _onKeyDown = _props$onKeyDown === undefined ? _lodash.noop : _props$onKeyDown,
      rest = _objectWithoutProperties(props, ["input", "intent", "onFieldSubmit", "onKeyDown"]);

  return _react2.default.createElement(_core.InputGroup, _extends({}, removeUnwantedProps(rest), {
    intent: intent
  }, input, {
    onKeyDown: function onKeyDown() {
      _onKeyDown.apply(undefined, arguments);
      var e = arguments.length <= 0 ? undefined : arguments[0];
      if (e.key === "Enter") {
        onFieldSubmit(e.target.value, { enter: true }, e);
      }
    },
    onBlur: function onBlur(e, val) {
      if (rest.readOnly) return;
      input.onBlur(e, val);
      onFieldSubmit(e.target ? e.target.value : val, { blur: true }, e);
    }
  }));
};

exports.renderBlueprintInput = renderBlueprintInput;
var renderBlueprintCheckbox = function renderBlueprintCheckbox(props) {
  var input = props.input,
      label = props.label,
      onFieldSubmit = props.onFieldSubmit,
      rest = _objectWithoutProperties(props, ["input", "label", "onFieldSubmit"]);

  return _react2.default.createElement(_core.Checkbox, _extends({}, removeUnwantedProps(rest), input, {
    checked: input.value,
    label: label,
    onChange: function onChange(e, val) {
      input.onChange(e, val);
      onFieldSubmit(e.target ? e.target.checked : val);
    }
  }));
};

exports.renderBlueprintCheckbox = renderBlueprintCheckbox;
var renderBlueprintSwitch = function renderBlueprintSwitch(props) {
  var input = props.input,
      label = props.label,
      onFieldSubmit = props.onFieldSubmit,
      rest = _objectWithoutProperties(props, ["input", "label", "onFieldSubmit"]);

  return _react2.default.createElement(_core.Switch, _extends({}, removeUnwantedProps(rest), input, {
    checked: input.value,
    label: label,
    onChange: function onChange(e, val) {
      input.onChange(e, val);
      onFieldSubmit(e.target ? e.target.checked : val);
    }
  }));
};

exports.renderBlueprintSwitch = renderBlueprintSwitch;
var renderFileUpload = function renderFileUpload(props) {
  var input = props.input,
      onFieldSubmit = props.onFieldSubmit,
      rest = _objectWithoutProperties(props, ["input", "onFieldSubmit"]);

  return _react2.default.createElement(_Uploader2.default, _extends({
    fileList: input.value,
    onFieldSubmit: onFieldSubmit
  }, rest, {
    onChange: input.onChange
  }));
};

exports.renderFileUpload = renderFileUpload;
var renderBlueprintTextarea = exports.renderBlueprintTextarea = (_temp2 = _class = function (_React$Component2) {
  _inherits(renderBlueprintTextarea, _React$Component2);

  function renderBlueprintTextarea() {
    var _temp, _this2, _ret;

    _classCallCheck(this, renderBlueprintTextarea);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this2 = _possibleConstructorReturn(this, _React$Component2.call.apply(_React$Component2, [this].concat(args))), _this2), _initialiseProps.call(_this2), _temp), _possibleConstructorReturn(_this2, _ret);
  }

  renderBlueprintTextarea.prototype.render = function render() {
    var _props4 = this.props,
        input = _props4.input,
        intentClass = _props4.intentClass,
        inputClassName = _props4.inputClassName,
        onFieldSubmit = _props4.onFieldSubmit,
        clickToEdit = _props4.clickToEdit,
        _onKeyDown2 = _props4.onKeyDown,
        rest = _objectWithoutProperties(_props4, ["input", "intentClass", "inputClassName", "onFieldSubmit", "clickToEdit", "onKeyDown"]);

    if (clickToEdit) {
      var isDisabled = clickToEdit && !this.state.isOpen;

      return _react2.default.createElement(
        _react2.default.Fragment,
        null,
        _react2.default.createElement(_core.TextArea, _extends({
          disabled: isDisabled
        }, removeUnwantedProps(rest), {
          className: (0, _classnames2.default)(intentClass, inputClassName, _core.Classes.INPUT, _core.Classes.FILL),
          value: this.state.value === null ? input.value : this.state.value,
          onChange: this.updateVal,
          onKeyDown: this.onKeyDown
        })),
        clickToEdit && (this.state.isOpen ?
        //show okay/cancel buttons
        _react2.default.createElement(
          "div",
          null,
          _react2.default.createElement(
            _core.Button,
            { onClick: this.stopEdit, intent: "danger" },
            "Cancel"
          ),
          _react2.default.createElement(
            _core.Button,
            { onClick: this.handleValSubmit, intent: "success" },
            "Ok"
          )
        ) :
        //show click to edit button
        _react2.default.createElement(
          _core.Button,
          { onClick: this.allowEdit },
          "Edit"
        ))
      );
    } else {
      return _react2.default.createElement(_core.TextArea, _extends({}, removeUnwantedProps(rest), {
        className: (0, _classnames2.default)(intentClass, inputClassName, _core.Classes.INPUT, _core.Classes.FILL)
      }, input, {
        onBlur: function onBlur(e, val) {
          if (rest.readOnly) return;
          input.onBlur(e, val);
          onFieldSubmit(e.target ? e.target.value : val, { blur: true }, e);
        },
        onKeyDown: function onKeyDown() {
          var e = arguments.length <= 0 ? undefined : arguments[0];
          (_onKeyDown2 || _lodash.noop).apply(undefined, arguments);
          if (e.keyCode === 13 && (e.metaKey || e.ctrlKey)) {
            onFieldSubmit(e.target.value, { cmdEnter: true }, e);
          }
        }
      }));
    }
  };

  return renderBlueprintTextarea;
}(_react2.default.Component), _initialiseProps = function _initialiseProps() {
  var _this3 = this;

  this.state = {
    value: null,
    isOpen: false
  };

  this.allowEdit = function () {
    _this3.setState({ isOpen: true });
  };

  this.stopEdit = function () {
    _this3.setState({ isOpen: false });
    _this3.setState({ value: null });
  };

  this.updateVal = function (e) {
    _this3.setState({ value: e.target.value });
  };

  this.handleValSubmit = function () {
    _this3.props.input.onChange(_this3.state.value);
    _this3.props.onFieldSubmit(_this3.state.value, { cmdEnter: true });

    _this3.stopEdit();
  };

  this.onKeyDown = function () {
    var e = arguments.length <= 0 ? undefined : arguments[0];
    (_this3.props.onKeyDown || _lodash.noop).apply(undefined, arguments);
    if (e.keyCode === 13 && (e.metaKey || e.ctrlKey)) {
      _this3.props.onFieldSubmit(e.target.value, { cmdEnter: true }, e);
      _this3.props.input.onChange(e);
      _this3.stopEdit();
    }
  };
}, _temp2);

// class ClickToEditWrapper extends React.Component {
//   state = { isEditing: false };
//   render() {
//     return <div />;
//   }
// }

var renderBlueprintEditableText = function renderBlueprintEditableText(props) {
  var input = props.input,
      onFieldSubmit = props.onFieldSubmit,
      rest = _objectWithoutProperties(props, ["input", "onFieldSubmit"]);

  return _react2.default.createElement(_core.EditableText, _extends({}, removeUnwantedProps(rest), input, {
    onConfirm: function onConfirm(value) {
      input.onBlur && input.onBlur(value);
      onFieldSubmit(value, { input: input, meta: rest.meta });
    }
  }));
};

exports.renderBlueprintEditableText = renderBlueprintEditableText;
var renderReactSelect = function renderReactSelect(props) {
  // spreading input not working, grab the values needed instead
  var async = props.async,
      _props$input2 = props.input,
      value = _props$input2.value,
      _onChange = _props$input2.onChange,
      hideValue = props.hideValue,
      intent = props.intent,
      options = props.options,
      onFieldSubmit = props.onFieldSubmit,
      rest = _objectWithoutProperties(props, ["async", "input", "hideValue", "intent", "options", "onFieldSubmit"]);

  var optionsPassed = options;

  var optsToUse = getOptions(optionsPassed);
  var valueToUse = void 0;

  if (!Array.isArray(value) && (typeof value === "undefined" ? "undefined" : _typeof(value)) === "object") {
    if (value.userCreated) {
      valueToUse = {
        label: value.value,
        value: value
      };
    } else {
      valueToUse = optsToUse.find(function (obj) {
        return (0, _deepEqual2.default)(obj.value, value);
      });
    }
  } else if (Array.isArray(value)) {
    valueToUse = value.map(function (val) {
      if (val.userCreated) {
        return {
          label: val.value,
          value: val
        };
      }
      if (optsToUse) {
        return optsToUse.find(function (obj) {
          return (0, _deepEqual2.default)(obj.value, val);
        });
      } else {
        return val;
      }
    });
  } else {
    valueToUse = value;
  }

  var propsToUse = _extends({}, removeUnwantedProps(rest), {
    intent: intent,
    options: optsToUse,
    value: valueToUse,
    // closeOnSelect: !rest.multi,
    onChange: function onChange(valOrVals) {
      var valToPass = void 0;
      if (Array.isArray(valOrVals)) {
        valToPass = valOrVals.map(function (val) {
          if (val.userCreated) {
            return val;
          }
          return val.value;
        });
      } else if (valOrVals) {
        if (valOrVals.userCreated) {
          valToPass = valOrVals;
        } else {
          valToPass = valOrVals.value;
        }
      } else {
        valToPass = "";
      }
      if (props.cancelSubmit && props.cancelSubmit(valToPass)) {
        //allow the user to cancel the submit
        return;
      }

      for (var _len2 = arguments.length, rest2 = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        rest2[_key2 - 1] = arguments[_key2];
      }

      _onChange.apply(undefined, [valToPass].concat(rest2));
      if (!rest.submitOnBlur) onFieldSubmit(valToPass);
    },
    onBlur: function onBlur() {
      var valToPass = Array.isArray(valueToUse) ? valueToUse.filter(function (val) {
        return !!val;
      }).map(function (val) {
        return val.value;
      }) : valueToUse;
      if (props.cancelSubmit && props.cancelSubmit(valToPass)) {
        return; //allow the user to cancel the submit
      }
      if (rest.submitOnBlur) {
        onFieldSubmit(valToPass);
      }
    }
  });
  return _react2.default.createElement(_TgSelect2.default, propsToUse);
};

exports.renderReactSelect = renderReactSelect;
var BPSelect = function BPSelect(_ref3) {
  var value = _ref3.value,
      onChange = _ref3.onChange,
      rest = _objectWithoutProperties(_ref3, ["value", "onChange"]);

  return renderSelect(_extends({}, rest, { input: { onChange: onChange, value: value } }));
};

exports.BPSelect = BPSelect;
var renderSelect = function renderSelect(props) {
  // spreading input not working, grab the values needed instead
  var _props$input3 = props.input,
      value = _props$input3.value,
      _onChange2 = _props$input3.onChange,
      hideValue = props.hideValue,
      className = props.className,
      placeholder = props.placeholder,
      onFieldSubmit = props.onFieldSubmit,
      options = props.options,
      hidePlaceHolder = props.hidePlaceHolder,
      minimal = props.minimal,
      disabled = props.disabled,
      rest = _objectWithoutProperties(props, ["input", "hideValue", "className", "placeholder", "onFieldSubmit", "options", "hidePlaceHolder", "minimal", "disabled"]);

  return _react2.default.createElement(
    "div",
    {
      className: (minimal && _core.Classes.MINIMAL) + " " + (0, _classnames2.default)(_core.Classes.SELECT, _core.Classes.FILL, className)
    },
    _react2.default.createElement(
      "select",
      _extends({}, removeUnwantedProps(rest), {
        className: (disabled && _core.Classes.DISABLED) + " ",
        value: placeholder && value === "" ? "__placeholder__" : typeof value !== "string" ? (0, _sortify2.default)(value) //deterministically sort and stringify the object/number coming in because select fields only support string values
        : value
      }, hideValue ? { value: "" } : {}, {
        onChange: function onChange(e) {
          var val = e.target.value;
          try {
            var maybeNewValue = JSON.parse(e.target.value); //try to json parse the string coming in
            var hasMatchInOriginalOptions = options.find(function (opt) {
              return opt === maybeNewValue || opt.value === maybeNewValue;
            });
            if (hasMatchInOriginalOptions || (0, _lodash.isPlainObject)(maybeNewValue)) {
              val = maybeNewValue;
            }
          } catch (e) {
            //empty
          }
          _onChange2(val);
          onFieldSubmit && onFieldSubmit(val);
        }
      }),
      placeholder && _react2.default.createElement(
        "option",
        { value: "__placeholder__", disabled: true, hidden: hidePlaceHolder },
        placeholder
      ),
      options.map(function (opt, index) {
        var label = void 0,
            value = void 0;
        if (typeof opt === "string") {
          //support passing opts like: ['asdf','awfw']
          label = opt;
          value = opt;
        } else if ((0, _lodash.isNumber)(opt)) {
          //support passing opts like: [1,2,3,4]
          label = opt.toString();
          value = opt;
        } else if (Array.isArray(opt)) {
          throw new Error("the option coming in should be an object, not an array!");
        } else {
          //support passing opts the normal way [{label: 'opt1', value: 'hey'}]
          label = opt.label;
          value = opt.value;
        }
        return _react2.default.createElement(
          "option",
          {
            key: index,
            value: typeof value !== "string" ? (0, _sortify2.default)(value) //deterministically sort and stringify the object/number coming in because select fields only support string values
            : value
          },
          label
        );
      })
    )
  );
};

exports.renderSelect = renderSelect;
var renderBlueprintNumericInput = function renderBlueprintNumericInput(props) {
  var input = props.input,
      hideValue = props.hideValue,
      intent = props.intent,
      inputClassName = props.inputClassName,
      onFieldSubmit = props.onFieldSubmit,
      onAnyNumberChange = props.onAnyNumberChange,
      rest = _objectWithoutProperties(props, ["input", "hideValue", "intent", "inputClassName", "onFieldSubmit", "onAnyNumberChange"]);

  function handleBlurOrButtonClick(stringVal) {
    if (rest.readOnly) return;
    try {
      var num = _mathExpressionEvaluator2.default.eval(stringVal);
      input.onBlur(num);
      onFieldSubmit(num);
    } catch (e) {
      console.error("TRC: Error occurring when setting evaluated numeric input field:", e);
      input.onBlur("");
      onFieldSubmit("");
    }
  }
  return _react2.default.createElement(_core.NumericInput, _extends({
    value: input.value,
    intent: intent
  }, removeUnwantedProps(rest), hideValue ? { value: "" } : {}, {
    className: (0, _classnames2.default)(_core.Classes.FILL, inputClassName),
    onValueChange: function onValueChange(numericVal, stringVal) {
      // needed for redux form to change value
      input.onChange(stringVal);
      //tnr: use this handler if you want to listen to all value changes!
      onAnyNumberChange && onAnyNumberChange(numericVal);
    },
    onButtonClick: function onButtonClick(numericVal, stringVal) {
      handleBlurOrButtonClick(stringVal);
    },
    onBlur: function onBlur(e) {
      handleBlurOrButtonClick(e.target.value);
    }
  }));
};

exports.renderBlueprintNumericInput = renderBlueprintNumericInput;
var renderBlueprintRadioGroup = function renderBlueprintRadioGroup(_ref4) {
  var input = _ref4.input,
      options = _ref4.options,
      onFieldSubmit = _ref4.onFieldSubmit,
      rest = _objectWithoutProperties(_ref4, ["input", "options", "onFieldSubmit"]);

  var optionsToUse = getOptions(options);
  return _react2.default.createElement(_core.RadioGroup, _extends({}, input, removeUnwantedProps(rest), {
    selectedValue: input.value,
    label: undefined //removing label from radio group because our label already handles it
    , onChange: function onChange(e, val) {
      for (var _len3 = arguments.length, args = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
        args[_key3 - 2] = arguments[_key3];
      }

      input.onChange.apply(input, [e, val].concat(args));
      onFieldSubmit(e.target ? e.target.value : val);
    },
    options: optionsToUse
  }));
};

exports.renderBlueprintRadioGroup = renderBlueprintRadioGroup;

var RenderReactColorPicker = exports.RenderReactColorPicker = function (_React$Component3) {
  _inherits(RenderReactColorPicker, _React$Component3);

  function RenderReactColorPicker() {
    var _temp3, _this4, _ret2;

    _classCallCheck(this, RenderReactColorPicker);

    for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }

    return _ret2 = (_temp3 = (_this4 = _possibleConstructorReturn(this, _React$Component3.call.apply(_React$Component3, [this].concat(args))), _this4), _this4.state = {
      displayColorPicker: false
    }, _this4.handleClick = function () {
      _this4.setState({ displayColorPicker: !_this4.state.displayColorPicker });
    }, _this4.handleClose = function () {
      _this4.setState({ displayColorPicker: false });
    }, _this4.handleChange = function (color) {
      var _this4$props = _this4.props,
          input = _this4$props.input,
          onFieldSubmit = _this4$props.onFieldSubmit;


      input.onChange(color.hex);
      onFieldSubmit(color.hex);
    }, _temp3), _possibleConstructorReturn(_this4, _ret2);
  }

  RenderReactColorPicker.prototype.render = function render() {
    var _props5 = this.props,
        input = _props5.input,
        onFieldSubmit = _props5.onFieldSubmit,
        rest = _objectWithoutProperties(_props5, ["input", "onFieldSubmit"]);

    return _react2.default.createElement(
      _react2.default.Fragment,
      null,
      _react2.default.createElement(
        "div",
        {
          style: {
            padding: "5px",
            background: "#fff",
            borderRadius: "1px",
            boxShadow: "0 0 0 1px rgba(0,0,0,.1)",
            display: "inline-block",
            cursor: "pointer"
          },
          onClick: this.handleClick
        },
        _react2.default.createElement("div", {
          style: {
            width: "36px",
            height: "14px",
            borderRadius: "2px",
            background: "" + input.value
          }
        })
      ),
      this.state.displayColorPicker ? _react2.default.createElement(
        "div",
        {
          style: {
            position: "absolute",
            zIndex: "2"
          }
        },
        _react2.default.createElement("div", {
          style: {
            position: "fixed",
            top: "0px",
            right: "0px",
            bottom: "0px",
            left: "0px"
          },
          onClick: this.handleClose
        }),
        _react2.default.createElement(_reactColor.SketchPicker, _extends({
          color: input.value,
          onChangeComplete: this.handleChange
        }, removeUnwantedProps(rest)))
      ) : null
    );
  };

  return RenderReactColorPicker;
}(_react2.default.Component);

function generateField(component, opts) {
  var compWithDefaultVal = withAbstractWrapper(component, opts);
  return function FieldMaker(_ref5) {
    var name = _ref5.name,
        isRequired = _ref5.isRequired,
        _ref5$onFieldSubmit = _ref5.onFieldSubmit,
        onFieldSubmit = _ref5$onFieldSubmit === undefined ? _lodash.noop : _ref5$onFieldSubmit,
        rest = _objectWithoutProperties(_ref5, ["name", "isRequired", "onFieldSubmit"]);

    // function onFieldSubmit(e,val) {
    //   _onFieldSubmit && _onFieldSubmit(e.target ? e.target.value : val)
    // }
    return _react2.default.createElement(_reduxForm.Field, _extends({
      onFieldSubmit: onFieldSubmit,
      name: name,
      component: compWithDefaultVal
    }, isRequired ? { validate: _utils.fieldRequired } : {}, rest));
  };
}

var withAbstractWrapper = exports.withAbstractWrapper = function withAbstractWrapper(ComponentToWrap) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  return function (props) {
    var defaultProps = _extends({}, props, {
      intent: getIntent(props),
      intentClass: getIntentClass(props)
    });
    return _react2.default.createElement(
      AbstractInput,
      _extends({}, opts, defaultProps),
      _react2.default.createElement(ComponentToWrap, defaultProps)
    );
  };
};

var InputField = exports.InputField = generateField(renderBlueprintInput);
var FileUploadField = exports.FileUploadField = generateField(renderFileUpload);
var DateInputField = exports.DateInputField = generateField(renderBlueprintDateInput);
var DateRangeInputField = exports.DateRangeInputField = generateField(renderBlueprintDateRangeInput);
var CheckboxField = exports.CheckboxField = generateField(renderBlueprintCheckbox, {
  noOuterLabel: true,
  noFillField: true
});
var SwitchField = exports.SwitchField = generateField(renderBlueprintSwitch, {
  noOuterLabel: true,
  noFillField: true
});
var TextareaField = exports.TextareaField = generateField(renderBlueprintTextarea);
var EditableTextField = exports.EditableTextField = generateField(renderBlueprintEditableText);
var NumericInputField = exports.NumericInputField = generateField(renderBlueprintNumericInput);
var RadioGroupField = exports.RadioGroupField = generateField(renderBlueprintRadioGroup, {
  noFillField: true
});
var ReactSelectField = exports.ReactSelectField = generateField(renderReactSelect);
var SelectField = exports.SelectField = generateField(renderSelect);
var ReactColorField = exports.ReactColorField = generateField(RenderReactColorPicker);

function getOptions(options) {
  return options && options.map(function (opt) {
    if (typeof opt === "string") {
      return { label: opt, value: opt };
    } else if ((0, _lodash.isNumber)(opt)) return { label: opt.toString(), value: opt };
    return opt;
  });
}