"use strict";

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = withQuery;

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _lodash = require("lodash");

var _apolloMethods = require("@teselagen/apollo-methods");

var _Loading = require("../../Loading");

var _Loading2 = _interopRequireDefault(_Loading);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var withLoadingHoc = function withLoadingHoc(options) {
  return function (WrappedComponent) {
    return function (_React$Component) {
      _inherits(WithLoadingComp, _React$Component);

      function WithLoadingComp() {
        _classCallCheck(this, WithLoadingComp);

        return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
      }

      WithLoadingComp.prototype.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(nextProps) {
        var showError = options.showError,
            queryNameToUse = options.queryNameToUse;

        if (showError && nextProps.data && this.props.data && !(0, _lodash.isEqual)(nextProps.data.error, this.props.data.error)) {
          var error = nextProps.data.error;
          if (this.props.loggedIn) {
            console.error("error:", error);
            window.toastr.error("Error loading " + queryNameToUse);
          } else {
            console.warn("Error supressed, not logged in");
          }
        }
      };

      WithLoadingComp.prototype.render = function render() {
        var showLoading = options.showLoading,
            inDialog = options.inDialog;
        var _props$data = this.props.data,
            data = _props$data === undefined ? {} : _props$data;
        var loading = data.loading;

        if (loading && showLoading) {
          var bounce = inDialog || showLoading === "bounce";
          return _react2.default.createElement(_Loading2.default, { inDialog: inDialog, bounce: bounce });
        }
        return _react2.default.createElement(WrappedComponent, this.props);
      };

      return WithLoadingComp;
    }(_react2.default.Component);
  };
};

function withQuery(fragment) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  //passing a default LoadingComponent to withQuery
  return (0, _apolloMethods.withQuery)(fragment, _extends({}, options, {
    withLoadingHoc: withLoadingHoc,
    LoadingComp: function LoadingComp(props) {
      return _react2.default.createElement(_Loading2.default, props);
    }
  }));
}
module.exports = exports["default"];