"use strict";

exports.__esModule = true;
exports.singleItemPredicate = exports.renderCreateNewOption = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _class, _temp2;

exports.createNewOption = createNewOption;

var _select = require("@blueprintjs/select");

var _core = require("@blueprintjs/core");

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _lodash = require("lodash");

var _fuzzysearch = require("fuzzysearch");

var _fuzzysearch2 = _interopRequireDefault(_fuzzysearch);

var _classnames = require("classnames");

var _classnames2 = _interopRequireDefault(_classnames);

require("./style.css");

var _getTextFromEl = require("../utils/getTextFromEl");

var _getTextFromEl2 = _interopRequireDefault(_getTextFromEl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TgSelect = (_temp2 = _class = function (_React$Component) {
  _inherits(TgSelect, _React$Component);

  function TgSelect() {
    var _temp, _this, _ret;

    _classCallCheck(this, TgSelect);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
      isOpen: false,
      activeItem: null,
      query: ""
    }, _this.itemRenderer = function (i, _ref) {
      var index = _ref.index,
          handleClick = _ref.handleClick,
          modifiers = _ref.modifiers;
      var optionRenderer = _this.props.optionRenderer;

      var onClick = i.onClick || handleClick;
      return _react2.default.createElement(
        "div",
        { //we specifically don't use a BP MenuItem component here because the menu item is too slow when 100s are loaded and will cause the component to lag
          onClick: modifiers.disabled ? undefined : onClick,
          key: index,
          className: (0, _classnames2.default)("tg-select-option bp3-menu-item bp3-fill bp3-text-overflow-ellipsis", {
            "bp3-active": modifiers.active,
            "bp3-disabled": modifiers.disabled
          })
        },
        optionRenderer ? optionRenderer(i, _this.props) : i.label
      );
    }, _this.tagRenderer = function (i) {
      if (!i || !_this.props.multi && _this.state.query) {
        return null;
      }
      return i.label;
    }, _this.handleItemSelect = function (item) {
      var _this$props = _this.props,
          onChange = _this$props.onChange,
          value = _this$props.value,
          multi = _this$props.multi,
          closeOnSelect = _this$props.closeOnSelect;

      _this.setState({ activeItem: null });
      if (multi) {
        var valArray = getValueArray(value);
        if (closeOnSelect || item.closeOnSelect) {
          _this.setState({ isOpen: false });
          _this.input && _this.input.blur();
        }
        return onChange([].concat(valArray, [item]));
      } else {
        _this.setState({ isOpen: false });
        _this.input && _this.input.blur();
        return onChange(item);
      }
    }, _this.handleTagRemove = function (e, tagProps) {
      var _this$props2 = _this.props,
          onChange = _this$props2.onChange,
          value = _this$props2.value;

      var filteredVals = (0, _lodash.filter)(value, function (obj, i) {
        return !(0, _lodash.isEqual)(i, tagProps["data-tag-index"]);
      });
      e.stopPropagation();
      onChange(filteredVals);
      _this.setState({ isOpen: false });
      _this.input.focus();
    }, _this.handleTagInputRemove = function (val, index) {
      var _this$props3 = _this.props,
          onChange = _this$props3.onChange,
          value = _this$props3.value;

      var filteredVals = (0, _lodash.filter)(value, function (obj, i) {
        return !(0, _lodash.isEqual)(i, index);
      });
      // e.stopPropagation();
      return onChange(filteredVals);
    }, _this.handleClear = function (e) {
      var multi = _this.props.multi;


      e.stopPropagation();
      e.preventDefault();
      var onChange = _this.props.onChange;

      _this.setState({ query: "" });
      onChange(multi ? [] : null);
      _this.setState({ isOpen: false });
      _this.input.focus();
    }, _this.itemPredicate = function (queryString, item) {
      var _this$props4 = _this.props,
          value = _this$props4.value,
          multi = _this$props4.multi,
          isSimpleSearch = _this$props4.isSimpleSearch;

      if (multi) {
        var valArray = getValueArray(value);

        var filteredVals = (0, _lodash.filter)(value, function (obj) {
          return !(0, _lodash.isEqual)(obj.value, item.value);
        });
        if (filteredVals.length !== valArray.length) return false;
      }
      return singleItemPredicate(queryString, item, isSimpleSearch);
    }, _this.onQueryChange = function (query) {
      var _this$props$onInputCh = _this.props.onInputChange,
          onInputChange = _this$props$onInputCh === undefined ? function () {} : _this$props$onInputCh;

      _this.setState({
        query: query
      });
      onInputChange(query);
    }, _this.handleActiveItemChange = function (item, isCreateNewItem) {
      _this.setState({
        activeItem: item || (
        //if there's no item and we're in creatable mode, auto-select the create-new option
        isCreateNewItem || _this.props.creatable ? (0, _select.getCreateNewItem)() : null)
      });
    }, _this.onInteraction = function () {
      if (_this.input != null && _this.input !== document.activeElement) {
        // the input is no longer focused so we can close the popover
        _this.setState({ isOpen: false, query: "" });
      } else if (!_this.props.openOnKeyDown) {
        // open the popover when focusing the tag input
        _this.setState({ isOpen: true });
      }
    }, _this.queryHasExactOptionMatch = function () {
      //we don't want to show the creatable if the thing being created already exactly matches the label
      return [].concat(_this.props.options || [], Array.isArray(_this.props.value) ? _this.props.value : [_this.props.value]).filter(function (o) {
        var _ref2 = o || {},
            label = _ref2.label,
            value = _ref2.value;

        return _this.state.query === (label && label.toLowerCase ? label.toLowerCase() : value && value.toLowerCase && value.toLowerCase());
      }).length > 0;
    }, _this.getTagProps = function (label) {
      var _this$props5 = _this.props,
          multi = _this$props5.multi,
          _this$props5$value = _this$props5.value,
          value = _this$props5$value === undefined ? [] : _this$props5$value;

      var val = Array.isArray(value) ? value : [value];
      var matchingVal = val.find(function (op) {
        return op.label === label;
      });
      var disabled = matchingVal && matchingVal.disabled;
      var className = matchingVal && matchingVal.className;

      return {
        intent: disabled ? "" : "primary",
        minimal: true,
        className: (0, _classnames2.default)(className, "tg-select-value", {
          disabled: disabled
        }),
        onRemove: multi && !disabled ? _this.handleTagRemove : null
      };
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  TgSelect.prototype.render = function render() {
    var _this2 = this;

    var _props = this.props,
        multi = _props.multi,
        options = _props.options,
        value = _props.value,
        creatable = _props.creatable,
        optionRenderer = _props.optionRenderer,
        tagInputProps = _props.tagInputProps,
        noResultsText = _props.noResultsText,
        _props$noResults = _props.noResults,
        noResults = _props$noResults === undefined ? noResultsDefault : _props$noResults,
        inputProps = _props.inputProps,
        placeholder = _props.placeholder,
        isLoading = _props.isLoading,
        onBlur = _props.onBlur,
        disabled = _props.disabled,
        popoverProps = _props.popoverProps,
        rest = _objectWithoutProperties(_props, ["multi", "options", "value", "creatable", "optionRenderer", "tagInputProps", "noResultsText", "noResults", "inputProps", "placeholder", "isLoading", "onBlur", "disabled", "popoverProps"]);

    var hasValue = Array.isArray(value) ? value.length > 0 : !!value;

    var rightElement = isLoading ? _react2.default.createElement(_core.Button, { loading: true, minimal: true }) : _react2.default.createElement(
      "span",
      null,
      hasValue && _react2.default.createElement(_core.Button, {
        className: "tg-select-clear-all",
        icon: "cross",
        minimal: true,
        onClick: this.handleClear
      }),
      _react2.default.createElement(_core.Button, {
        onClick: function onClick(e) {
          if (_this2.state.isOpen) {
            e.stopPropagation();

            _this2.setState({ isOpen: false });
          }
        },
        className: "tg-select-toggle",
        minimal: true,
        icon: this.state.isOpen ? "caret-up" : "caret-down"
      })
    );

    var maybeCreateNewItemFromQuery = creatable ? createNewOption : undefined;
    var maybeCreateNewItemRenderer = creatable && !this.queryHasExactOptionMatch() ? renderCreateNewOption : null;
    var selectedItems = getValueArray(value).map(function (value) {
      if (value && value.label) return value; //if the value has a label, just use that
      //if not, look for an existing option to use that value
      return options.find(function (opt) {
        return opt && opt.value === (value && value.value || value);
      });
    });
    return _react2.default.createElement(_select.MultiSelect, _extends({
      onActiveItemChange: this.handleActiveItemChange,
      closeOnSelect: !multi,
      resetOnSelect: !multi,
      items: options || [],
      activeItem: this.state.activeItem || options && options.filter(function (opt) {
        return !selectedItems.includes(opt);
      })[0] || null //it's important we pass null here instead of undefined if no active item is found
      ,
      itemDisabled: itemDisabled,
      query: this.state.query,
      popoverProps: _extends({
        minimal: true,
        className: (0, _classnames2.default)("tg-select", {
          "tg-single-select": !multi
        }),
        wrapperTagName: "div",
        usePortal: false,
        canEscapeKeyClose: true,
        onInteraction: this.onInteraction,
        isOpen: this.state.isOpen
      }, popoverProps),
      onKeyDown: function onKeyDown(e) {
        var which = e.which;

        if (which === _core.Keys.ENTER) {
          e.preventDefault();

          e.stopPropagation(); //this prevents dialog's it is in from closing
        }
        if (which === _core.Keys.ESCAPE || which === _core.Keys.TAB) {
          // By default the escape key will not trigger a blur on the
          // input element. It must be done explicitly.
          if (_this2.input != null) {
            _this2.input.blur();
          }
          _this2.setState({ isOpen: false });
          e.preventDefault();
          e.stopPropagation(); //this prevents dialog's it is in from closing
        } else if (!(which === _core.Keys.BACKSPACE || which === _core.Keys.ARROW_LEFT || which === _core.Keys.ARROW_RIGHT)) {
          _this2.setState({ isOpen: true });
        }
      },
      resetOnClose: true,
      onItemSelect: this.handleItemSelect,
      createNewItemFromQuery: maybeCreateNewItemFromQuery,
      createNewItemRenderer: maybeCreateNewItemRenderer,
      noResults: noResultsText || noResults,
      onQueryChange: this.onQueryChange,
      itemRenderer: this.itemRenderer,
      itemPredicate: this.itemPredicate
    }, {
      selectedItems: selectedItems,
      tagRenderer: this.tagRenderer,
      tagInputProps: _extends({
        inputRef: function inputRef(n) {
          if (n) _this2.input = n;
        },
        placeholder: placeholder || (creatable ? "Select/Create..." : "Select..."),
        tagProps: this.getTagProps,
        onRemove: multi ? this.handleTagInputRemove : null,
        rightElement: rightElement,
        disabled: disabled }, tagInputProps, { //spread additional tag input props here
        intent: this.props.intent,
        inputProps: _extends({
          onBlur: onBlur
        }, tagInputProps && tagInputProps.inputProps)
      })
    }, rest));
  };

  return TgSelect;
}(_react2.default.Component), _class.defaultProps = {
  onChange: function onChange() {},
  options: [],
  value: undefined
}, _temp2);
exports.default = TgSelect;


var itemDisabled = function itemDisabled(i) {
  return i.disabled;
};
var noResultsDefault = _react2.default.createElement(
  "div",
  null,
  "No Results..."
);

var renderCreateNewOption = exports.renderCreateNewOption = function renderCreateNewOption(query, active, handleClick) {
  return _react2.default.createElement(_core.MenuItem, {
    icon: "add",
    text: "Create \"" + query + "\"",
    active: active,
    onClick: handleClick,
    shouldDismissPopover: false
  });
};

function createNewOption(newValString) {
  return {
    userCreated: true,
    label: newValString,
    value: newValString
  };
}

function getValueArray(value) {
  return value || value === 0 ? Array.isArray(value) ? value : [value] : [];
}

//we export this here for use in createGenericSelect
var singleItemPredicate = exports.singleItemPredicate = function singleItemPredicate(queryString, item, isSimpleSearch) {
  return (isSimpleSearch ? simplesearch : _fuzzysearch2.default)(queryString.toLowerCase(), item.label ? item.label.toLowerCase ? item.label.toLowerCase() : (0, _getTextFromEl2.default)(item.label, { lowerCase: true }) : item.value && item.value.toLowerCase && item.value.toLowerCase() || "");
};

function simplesearch(needle, haystack) {
  return (haystack || "").indexOf(needle) !== -1;
}