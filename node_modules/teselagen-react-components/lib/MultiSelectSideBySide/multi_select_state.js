"use strict";

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var withMultiSelectState = function withMultiSelectState(WrappedComponent) {
  var _class, _temp;

  return _temp = _class = function (_PureComponent) {
    _inherits(_class, _PureComponent);

    function _class(props) {
      _classCallCheck(this, _class);

      var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));

      _this.selectItem = _this.selectItem.bind(_this);
      _this.unselectItems = _this.unselectItems.bind(_this);
      _this.filterItems = _this.filterItems.bind(_this);
      _this.selectAllItems = _this.selectAllItems.bind(_this);
      _this.isAllSelected = _this.isAllSelected.bind(_this);
      _this.clearAll = _this.clearAll.bind(_this);
      _this.handleChange = _this.handleChange.bind(_this);
      _this.getList = _this.getList.bind(_this);
      _this.onKeyUp = _this.onKeyUp.bind(_this);

      var items = props.items,
          selectedItems = props.selectedItems;

      _this.state = {
        selectedItems: selectedItems,
        items: items,
        filteredItems: items
      };
      return _this;
    }

    _class.prototype.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(nextProps) {
      if (this.props.selectedItems !== nextProps.selectedItems) {
        this.setState({ selectedItems: nextProps.selectedItems });
      }
      if (this.props.items !== nextProps.items) {
        this.setState({
          items: nextProps.items,
          filteredItems: nextProps.items
        });
      }
    };

    _class.prototype.handleMultiSelection = function handleMultiSelection(index) {
      var items = this.props.items;
      var _state = this.state,
          selectedItems = _state.selectedItems,
          filteredItems = _state.filteredItems;

      var _getMinMaxIndexes = this.getMinMaxIndexes(index),
          minIndex = _getMinMaxIndexes.minIndex,
          maxIndex = _getMinMaxIndexes.maxIndex;

      var newSelectedItems = items.filter(function (item, index) {
        return index >= minIndex && index <= maxIndex && filteredItems.find(function (filteredItem) {
          return item.id === filteredItem.id;
        }) || selectedItems.find(function (selectedItem) {
          return item.id === selectedItem.id;
        });
      });
      this.setState({ selectedItems: newSelectedItems }, this.handleChange);
    };

    _class.prototype.getMinMaxIndexes = function getMinMaxIndexes(currentIndex) {
      var firstItemShiftSelected = this.state.firstItemShiftSelected;

      return firstItemShiftSelected > currentIndex ? { minIndex: currentIndex, maxIndex: firstItemShiftSelected } : { minIndex: firstItemShiftSelected, maxIndex: currentIndex };
    };

    _class.prototype.getNewSelectedItems = function getNewSelectedItems(itemId) {
      var items = this.props.items;
      var selectedItems = this.state.selectedItems;

      var sourceItems = items.filter(function (item) {
        return item.id === itemId || selectedItems.find(function (selectedItem) {
          return item.id === selectedItem.id;
        });
      });
      var destinationItems = selectedItems.filter(function (selectedItem) {
        return !items.find(function (item) {
          return item.id === selectedItem.id;
        });
      });
      return [].concat(destinationItems, sourceItems);
    };

    _class.prototype.componentDidMount = function componentDidMount() {
      window.addEventListener("keyup", this.onKeyUp);
    };

    _class.prototype.componentWillUnmount = function componentWillUnmount() {
      window.removeEventListener("keyup", this.onKeyUp, false);
    };

    _class.prototype.onKeyUp = function onKeyUp(event) {
      if (event.keyCode === 16) {
        this.setState({ firstItemShiftSelected: undefined });
      }
    };

    _class.prototype.selectItem = function selectItem(event, id) {
      var items = this.props.items;
      var _state2 = this.state,
          selectedItems = _state2.selectedItems,
          firstItemShiftSelected = _state2.firstItemShiftSelected;

      if (!selectedItems.find(function (item) {
        return item.id === id;
      })) {
        if (event.shiftKey && firstItemShiftSelected !== undefined) {
          this.handleMultiSelection(items.findIndex(function (item) {
            return item.id === id;
          }));
        } else {
          if (event.shiftKey && firstItemShiftSelected === undefined) {
            var index = items.findIndex(function (item) {
              return item.id === id;
            });
            this.setState({ firstItemShiftSelected: index });
          }
          var newSelectedItems = this.getNewSelectedItems(id);
          this.setState({ selectedItems: newSelectedItems }, this.handleChange);
        }
      } else {
        this.unselectItems([id]);
      }
    };

    _class.prototype.unselectItems = function unselectItems(ids) {
      var selectedItems = this.state.selectedItems;

      var newSelectedItems = selectedItems.filter(function (item) {
        return ids.find(function (id) {
          return id === item.id;
        }) === undefined;
      });
      this.setState({
        selectedItems: newSelectedItems
      }, this.handleChange);
    };

    _class.prototype.clearAll = function clearAll() {
      this.setState({ selectedItems: [] }, this.handleChange);
    };

    _class.prototype.filterItems = function filterItems(event) {
      var _props = this.props,
          items = _props.items,
          filterFunction = _props.filterFunction,
          searchValueChanged = _props.searchValueChanged;
      var value = event.target.value;

      this.setState({
        filteredItems: items.filter(filterFunction(value))
      });

      searchValueChanged && searchValueChanged(value);
    };

    _class.prototype.selectAllItems = function selectAllItems() {
      var _state3 = this.state,
          filteredItems = _state3.filteredItems,
          selectedItems = _state3.selectedItems;
      var items = this.props.items;

      if (this.isAllSelected()) {
        this.unselectItems(filteredItems.map(function (filteredItem) {
          return filteredItem.id;
        }));
      } else {
        var sourceItems = items.filter(function (item) {
          return filteredItems.find(function (filteredItem) {
            return item.id === filteredItem.id && !item.disabled;
          }) || selectedItems.find(function (selectedItem) {
            return item.id === selectedItem.id;
          });
        });
        var destinationItems = selectedItems.filter(function (selectedItem) {
          return !filteredItems.find(function (filteredItem) {
            return selectedItem.id === filteredItem.id;
          }) && !items.find(function (item) {
            return selectedItem.id === item.id;
          });
        });
        this.setState({ selectedItems: [].concat(destinationItems, sourceItems) }, this.handleChange);
      }
    };

    _class.prototype.isAllSelected = function isAllSelected() {
      var _state4 = this.state,
          filteredItems = _state4.filteredItems,
          selectedItems = _state4.selectedItems;

      var selectedItemsInFilteredItems = selectedItems.filter(function (selectedItem) {
        return filteredItems.find(function (item) {
          return item.id === selectedItem.id;
        });
      });
      var selectableFilteredItems = filteredItems.filter(function (item) {
        return !item.disabled;
      });
      return selectedItemsInFilteredItems.length === selectableFilteredItems.length && selectableFilteredItems.length > 0;
    };

    _class.prototype.handleChange = function handleChange() {
      var onChange = this.props.onChange;
      var selectedItems = this.state.selectedItems;

      this.list && this.list.update();
      onChange && onChange(selectedItems);
    };

    _class.prototype.getList = function getList(ref) {
      this.list = ref;
    };

    _class.prototype.render = function render() {
      return _react2.default.createElement(WrappedComponent, _extends({}, this.props, this.state, {
        unselectItems: this.unselectItems,
        selectItem: this.selectItem,
        filterItems: this.filterItems,
        selectAllItems: this.selectAllItems,
        isAllSelected: this.isAllSelected(),
        clearAll: this.clearAll,
        getList: this.getList
      }));
    };

    return _class;
  }(_react.PureComponent), _class.defaultProps = {
    filterFunction: function filterFunction(value) {
      return function (item) {
        return String(item.label).toLowerCase().includes(value.toLowerCase());
      };
    },
    items: [],
    selectedItems: []
  }, _temp;
};

exports.default = withMultiSelectState;
module.exports = exports["default"];