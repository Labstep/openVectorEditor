var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

import ReactDOM from "react-dom";
import React from "react";
import uniqid from "uniqid";
// import withDialog from "./enhancers/withDialog";
import { Dialog } from "@blueprintjs/core";

//this is only really useful for unconnected standalone simple dialogs
//remember to pass usePortal={false} to the <Dialog/> component so it will close properly
export default function showDialogOnDocBody(DialogComp) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var dialogHolder = document.createElement("div");
  var className = "myDialog" + uniqid();
  dialogHolder.className = className;
  document.body.appendChild(dialogHolder);
  var onClose = function onClose() {
    document.querySelector("." + className).remove();
  };
  var DialogCompToUse = void 0;
  if (options.addDialogContainer) {
    DialogCompToUse = function DialogCompToUse(props) {
      return React.createElement(
        Dialog,
        _extends({
          usePortal: false,
          title: "pass a {title} prop",
          isOpen: true
        }, props),
        React.createElement(DialogComp, _extends({}, props, {
          hideModal: onClose,
          onClose: onClose
        }))
      );
    };
  } else {
    DialogCompToUse = DialogComp;
  }
  ReactDOM.render(React.createElement(DialogCompToUse, _extends({ hideModal: onClose, onClose: onClose }, options)), dialogHolder);
}