var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from "react";
import { isFunction } from "lodash";
import rerenderOnWindowResize from "./rerenderOnWindowResize";
import "./FillWindow.css";

// use like:
// <FillWindow>
//         {({ width, height }) => {
//           return <div style={{width, height}}></div>
//         }
// <FillWindow/>

var FillWindow = function (_React$Component) {
  _inherits(FillWindow, _React$Component);

  function FillWindow(props) {
    _classCallCheck(this, FillWindow);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    rerenderOnWindowResize(_this);
    return _this;
  }
  // this is left here for posterity. componentDidMount didn't work before commit ee1853a5ae2e6e27b720dd225650cc2154076db5 "fixing rerenderOnWindowResize to bind this keyword correctly"
  // componentDidMount(){
  //   this.setState({thomas: "realCool"})
  // }

  FillWindow.prototype.render = function render() {
    var w = window,
        d = document,
        e = d.documentElement,
        g = d.getElementsByTagName("body")[0],
        width = w.innerWidth || e.clientWidth || g.clientWidth,
        height = w.innerHeight || e.clientHeight || g.clientHeight;
    var windowDimensions = {
      width: width,
      height: height
    };

    var _props = this.props,
        _props$containerStyle = _props.containerStyle,
        containerStyle = _props$containerStyle === undefined ? {} : _props$containerStyle,
        style = _props.style,
        styleOverrides = _props.styleOverrides,
        className = _props.className,
        rest = _objectWithoutProperties(_props, ["containerStyle", "style", "styleOverrides", "className"]);

    if (this.props.disabled) return this.props.children(windowDimensions);
    return React.createElement(
      "div",
      _extends({
        className: "tg-fillWindow " + className || "",
        style: _extends({}, style, {
          width: width,
          height: height,
          position: "fixed",
          top: 0,
          left: 0,
          background: "white"
        }, containerStyle, styleOverrides)
      }, rest),
      this.props.children && isFunction(this.props.children) ? this.props.children(windowDimensions) : this.props.children
    );
  };

  return FillWindow;
}(React.Component);

export { FillWindow as default };