import _regeneratorRuntime from "babel-runtime/regenerator";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { Button, Intent, Tooltip, Classes } from "@blueprintjs/core";
import { get, isEqual, noop, pick, debounce, keyBy } from "lodash";
import pluralize from "pluralize";
import { Query } from "react-apollo";
import React, { Component } from "react";
import { compose } from "recompose";
import { connect } from "react-redux";
import { withQuery } from "@teselagen/apollo-methods";
import { branch, withProps } from "recompose";
import { change, clearFields as _clearFields, reduxForm } from "redux-form";
import moment from "moment";
import generateQuery from "../utils/generateQuery";
import DialogFooter from "../DialogFooter";
import withField from "../enhancers/withField";
import withDialog from "../enhancers/withDialog";
import withTableParams from "../DataTable/utils/withTableParams";
import DataTable from "../DataTable";
import { withAbstractWrapper } from "../FormComponents";
import TgSelect from "../TgSelect";

function preventBubble(e) {
  e.stopPropagation();
}

export default (function (_ref) {
  var _class, _temp2;

  var modelNameToReadableName = _ref.modelNameToReadableName,
      withQueryAsFn = _ref.withQueryAsFn,
      safeQuery = _ref.safeQuery;

  return compose(
  // useage example:
  // <GenericSelect {...{
  //   name: "selectedWorklists", //the field name within the redux form Field
  //   isMultiSelect: true,
  //   schema: ["name", "lastModified"],
  //   fragment: worklistMinimalFragment,
  //   additionalDataFragment: worklistFragment,
  // }}/>

  // if you want initialValues, simply pass them to the reduxForm wrapped component like:
  // {
  //   initialValues: {
  //     selectedWorklists: [{id: 1, name: "worklist1"}]
  //   }
  // }

  //options:
  // name - the field name of the redux form Field!
  // schema - the schema for the data table
  // getButtonText(selectedEntities) - function to override the button text if necessary
  // isMultiSelect=false - do you want users to be able to select multiple entities or just one
  // noDialog=false - set to true to not have the selector show up in a dialog
  // noRemoveButton=false - set to true to not have the option to remove the selection
  // fragment - the fragment powering the lookup/datatable
  // dialogProps - any dialog overrides you might want to make
  // dialogFooterProps - any dialogFooter overrides you might want to make
  // additionalDataFragment - optional fragment for fetching more data based on the initially selected data
  // postSelectDTProps - props passed to the DataTable shown after select. If none are passed the DataTable isn't shown
  // onSelect - optional callback for doing things with the selected data
  //

  // ################################   asReactSelect   ################################
  // idAs="id" - use this to get the TgSelect to use some other property as the "value" aka idAs="code" for code based selects
  // asReactSelect - optionally make the generic select a simple TgSelect component instead of the default datatables
  // reactSelectProps - optionally pass additional props to the TgSelect
  // ...rest - all additional props will be passed to the TgSelect
  // ** preventing unselect if you don't want a certain option to be unselected ever, you can pass initialValues with a property called clearableValue  entity.clearableValue,
  branch(function (props) {
    return props.noForm;
  }, reduxForm({
    form: "genericSelect",
    asyncBlurFields: [] //hacky fix for weird redux form asyncValidate error https://github.com/erikras/redux-form/issues/1675
  })), withProps(function (_ref2) {
    var name = _ref2.name,
        asReactSelect = _ref2.asReactSelect,
        _idAs = _ref2.idAs,
        _isCodeModel = _ref2.isCodeModel;

    var idAs = _idAs;
    if (!idAs) {
      idAs = _isCodeModel ? "code" : "id";
    }
    var isCodeModel = _isCodeModel;
    if (!isCodeModel) {
      isCodeModel = idAs === "code";
    }
    return _extends({
      passedName: name,
      isCodeModel: isCodeModel,
      idAs: idAs
    }, asReactSelect && { noDialog: true });
  }), withProps(function (_ref3) {
    var fragment = _ref3.fragment,
        nameOverride = _ref3.nameOverride,
        isMultiSelect = _ref3.isMultiSelect,
        schema = _ref3.schema,
        dialogProps = _ref3.dialogProps,
        postSelectDTProps = _ref3.postSelectDTProps,
        noFill = _ref3.noFill,
        passedName = _ref3.passedName;

    var modelName = Array.isArray(fragment) ? fragment[0] : get(fragment, "definitions[0].typeCondition.name.value");
    var readableName = nameOverride || modelNameToReadableName(modelName, {
      plural: isMultiSelect,
      upperCase: true
    });
    return _extends({
      readableName: readableName
    }, !noFill && {
      containerStyle: {
        width: "100%"
      }
    }, {
      modelName: modelName
    }, postSelectDTProps && {
      postSelectFormName: passedName + "PostSelect"
    }, {
      schema: !schema.model ? {
        model: modelName,
        fields: schema
      } : schema,
      dialogProps: _extends({
        title: "Select " + readableName
      }, dialogProps)
    });
  }), withField(), connect(null, function (dispatch) {
    return {
      changeFieldValue: function changeFieldValue() {
        return dispatch(change.apply(undefined, arguments));
      },
      clearFields: function clearFields() {
        return dispatch(_clearFields.apply(undefined, arguments));
      }
    };
  }), withAbstractWrapper)((_temp2 = _class = function (_React$Component) {
    _inherits(GenericSelectOuter, _React$Component);

    function GenericSelectOuter() {
      var _this2 = this;

      var _temp, _this, _ret;

      _classCallCheck(this, GenericSelectOuter);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
        fetchingData: false,
        tempValue: null
      }, _this.resetPostSelectSelection = function () {
        var _this$props = _this.props,
            postSelectFormName = _this$props.postSelectFormName,
            _this$props$postSelec = _this$props.postSelectDTProps,
            postSelectDTProps = _this$props$postSelec === undefined ? {} : _this$props$postSelec,
            changeFieldValue = _this$props.changeFieldValue;

        var postSelectDTFormName = postSelectDTProps.formName || postSelectFormName;
        if (postSelectDTFormName) {
          changeFieldValue(postSelectDTFormName, "reduxFormSelectedEntityIdMap", {});
        }
      }, _this.removeEntityFromSelection = function (record) {
        var _this$props2 = _this.props,
            idAs = _this$props2.idAs,
            _this$props2$input = _this$props2.input,
            onChange = _this$props2$input.onChange,
            _this$props2$input$va = _this$props2$input.value,
            value = _this$props2$input$va === undefined ? [] : _this$props2$input$va;

        var newValue = value.filter(function (r) {
          return r[idAs] !== record[idAs];
        });
        if (newValue.length) {
          onChange(newValue);
          _this.setState({
            tempValue: null
          });
          _this.resetPostSelectSelection();
        } else {
          _this.removeSelection();
        }
      }, _this.removeSelection = function () {
        var _this$props3 = _this.props,
            form = _this$props3.meta.form,
            name = _this$props3.input.name,
            changeFieldValue = _this$props3.changeFieldValue,
            isMultiSelect = _this$props3.isMultiSelect,
            _this$props3$onClear = _this$props3.onClear,
            onClear = _this$props3$onClear === undefined ? noop : _this$props3$onClear;

        var newVal = isMultiSelect ? [] : null;
        changeFieldValue(form, name, newVal);
        onClear();
        _this.setState({
          tempValue: null
        });
        _this.resetPostSelectSelection();
      }, _this.handleOnChange = function (newValue) {
        var _this$props4 = _this.props,
            _this$props4$input = _this$props4.input,
            _this$props4$input$on = _this$props4$input.onChange,
            onChange = _this$props4$input$on === undefined ? noop : _this$props4$input$on,
            _this$props4$input$va = _this$props4$input.value,
            value = _this$props4$input$va === undefined ? [] : _this$props4$input$va,
            idAs = _this$props4.idAs,
            isMultiSelect = _this$props4.isMultiSelect,
            preserveValue = _this$props4.preserveValue;

        var toSelect = newValue;
        if (isMultiSelect && value.length && preserveValue) {
          var newIds = newValue.map(function (r) {
            return r[idAs];
          });
          toSelect = value.filter(function (r) {
            return !newIds.includes(r[idAs]);
          }).concat(newValue);
        }
        onChange(toSelect);
      }, _this.handleSelection = function () {
        var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(records, options) {
          var _filter;

          var _this$props5, additionalDataFragment, readableName, asReactSelect, onSelect, isMultiSelect, postSelectDTProps, idAs, toSelect, queryVariables, _records, _toSelect;

          return _regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _this$props5 = _this.props, additionalDataFragment = _this$props5.additionalDataFragment, readableName = _this$props5.readableName, asReactSelect = _this$props5.asReactSelect, onSelect = _this$props5.onSelect, isMultiSelect = _this$props5.isMultiSelect, postSelectDTProps = _this$props5.postSelectDTProps, idAs = _this$props5.idAs;
                  toSelect = isMultiSelect ? records : records[0];

                  _this.resetPostSelectSelection();

                  if (!(asReactSelect && !records.length)) {
                    _context.next = 5;
                    break;
                  }

                  return _context.abrupt("return", _this.removeSelection());

                case 5:
                  if (additionalDataFragment) {
                    _context.next = 9;
                    break;
                  }

                  onSelect && onSelect(toSelect, options);
                  _this.handleOnChange(toSelect || null);
                  return _context.abrupt("return");

                case 9:

                  _this.setState({
                    fetchingData: true
                  });
                  queryVariables = {
                    filter: (_filter = {}, _filter[idAs] = isMultiSelect ? records.map(function (r) {
                      return r[idAs];
                    }) : records[0][idAs], _filter)
                  };

                  if (postSelectDTProps) {
                    _context.next = 34;
                    break;
                  }

                  _context.prev = 12;
                  _records = void 0;

                  if (!safeQuery) {
                    _context.next = 20;
                    break;
                  }

                  _context.next = 17;
                  return safeQuery(additionalDataFragment, {
                    variables: queryVariables
                  });

                case 17:
                  _records = _context.sent;
                  _context.next = 23;
                  break;

                case 20:
                  _context.next = 22;
                  return withQueryAsFn(additionalDataFragment, {
                    isPlural: true
                  })(queryVariables);

                case 22:
                  _records = _context.sent;

                case 23:
                  _toSelect = isMultiSelect ? _records : _records[0];

                  onSelect && onSelect(_toSelect, options);
                  _this.handleOnChange(_toSelect);
                  _context.next = 32;
                  break;

                case 28:
                  _context.prev = 28;
                  _context.t0 = _context["catch"](12);

                  console.error("err:", _context.t0);
                  window.toastr.error("Error fetching " + readableName);

                case 32:
                  _context.next = 35;
                  break;

                case 34:
                  if (!additionalDataFragment) {
                    _this.handleOnChange(toSelect);
                  } else {
                    // this is necessary because sometimes we are relying on the field to have
                    // the full data
                    _this.setState({
                      tempValue: toSelect
                    });
                  }

                case 35:
                  _this.setState({
                    fetchingData: false
                  });

                case 36:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, _this2, [[12, 28]]);
        }));

        return function (_x, _x2) {
          return _ref4.apply(this, arguments);
        };
      }(), _temp), _possibleConstructorReturn(_this, _ret);
    }

    GenericSelectOuter.prototype.render = function render() {
      var _state = this.state,
          fetchingData = _state.fetchingData,
          tempValue = _state.tempValue;
      var _props = this.props,
          value = _props.input.value,
          readableName = _props.readableName,
          noDialog = _props.noDialog,
          postSelectFormName = _props.postSelectFormName,
          getButtonText = _props.getButtonText,
          noRemoveButton = _props.noRemoveButton,
          getButton = _props.getButton,
          postSelectDTProps = _props.postSelectDTProps,
          withSelectedTitle = _props.withSelectedTitle,
          additionalDataFragment = _props.additionalDataFragment,
          _props$buttonProps = _props.buttonProps,
          buttonProps = _props$buttonProps === undefined ? {} : _props$buttonProps,
          isMultiSelect = _props.isMultiSelect,
          handlersObj = _props.handlersObj,
          onSelect = _props.onSelect,
          noForm = _props.noForm,
          idAs = _props.idAs;

      if (handlersObj) {
        handlersObj.removeSelection = this.removeSelection;
      }
      var postSelectValueToUse = tempValue || value;
      var postSelectDataTableValue = postSelectValueToUse;
      if (postSelectDataTableValue && !Array.isArray(postSelectDataTableValue)) {
        postSelectDataTableValue = [postSelectDataTableValue];
      }
      /* eslint-disable no-debugger*/
      if (postSelectDTProps && !postSelectDTProps.schema) debugger;
      /* eslint-enable no-debugger*/
      var propsToPass = _extends({}, this.props, {
        handleSelection: this.handleSelection,
        currentValue: value
      });

      var hasValue = !!value;
      // need to account for case where value = [] which is empty
      if (Array.isArray(value) && !value.length) hasValue = false;

      return noDialog ? React.createElement(
        "div",
        { className: "tg-generic-select-container", onClick: preventBubble },
        React.createElement(GenericSelectInner, propsToPass)
      ) : React.createElement(
        "div",
        { className: "tg-generic-select-container" },
        React.createElement(
          "div",
          {
            onClick: preventBubble,
            style: { paddingTop: 10, paddingBottom: 10 }
          },
          React.createElement(
            "div",
            { style: { display: "flex" } },
            React.createElement(
              GenericSelectInner,
              propsToPass,
              getButton ? getButton(value, propsToPass, this.state) : React.createElement(Button, _extends({
                intent: hasValue ? Intent.NONE : Intent.PRIMARY,
                text: getButtonText ? getButtonText(value) : hasValue ? "Change " + readableName : "Select " + readableName
              }, buttonProps, {
                loading: fetchingData || buttonProps.loading
              }))
            ),
            hasValue && !noRemoveButton && !noForm && React.createElement(
              Tooltip,
              {
                disabled: buttonProps.disabled,
                content: "Clear " + readableName
              },
              React.createElement(Button, {
                minimal: true,
                style: { marginLeft: 4 },
                intent: Intent.DANGER,
                disabled: buttonProps.disabled,
                onClick: this.removeSelection,
                icon: "trash"
              })
            )
          ),
          postSelectDTProps && postSelectDataTableValue && !!postSelectDataTableValue.length && React.createElement(PostSelectTable, {
            idAs: idAs,
            additionalDataFragment: additionalDataFragment,
            initialEntities: postSelectDataTableValue,
            genericSelectValue: value,
            onSelect: onSelect,
            withSelectedTitle: withSelectedTitle,
            readableName: readableName,
            removeSelection: this.removeSelection,
            removeEntityFromSelection: this.removeEntityFromSelection,
            postSelectFormName: postSelectFormName,
            postSelectDTProps: postSelectDTProps,
            isMultiSelect: isMultiSelect,
            resetSelection: this.resetPostSelectSelection,
            changeGenericSelectValue: this.handleOnChange,
            buttonProps: buttonProps
          })
        )
      );
    };

    return GenericSelectOuter;
  }(React.Component), _class.defaultProps = {
    input: {},
    meta: {}
  }, _temp2));
});

var PostSelectTable = branch(function (_ref5) {
  var additionalDataFragment = _ref5.additionalDataFragment;
  return !!additionalDataFragment;
}, function WithQueryHOC(WrappedComponent) {
  return function (_React$Component2) {
    _inherits(WithLoadingComp, _React$Component2);

    function WithLoadingComp() {
      _classCallCheck(this, WithLoadingComp);

      return _possibleConstructorReturn(this, _React$Component2.apply(this, arguments));
    }

    WithLoadingComp.prototype.render = function render() {
      var _filter2,
          _this4 = this;

      var _props2 = this.props,
          additionalDataFragment = _props2.additionalDataFragment,
          isMultiSelect = _props2.isMultiSelect,
          initialEntities = _props2.initialEntities,
          idAs = _props2.idAs;


      var gqlQuery = generateQuery(additionalDataFragment, {
        isPlural: true
      });

      return React.createElement(
        Query,
        {
          variables: {
            filter: (_filter2 = {}, _filter2[idAs] = isMultiSelect ? initialEntities.map(function (e) {
              return e[idAs];
            }) : initialEntities[0][idAs], _filter2)
          },
          query: gqlQuery
        },
        function (_ref6) {
          var loading = _ref6.loading,
              error = _ref6.error,
              data = _ref6.data;

          var modelName = Array.isArray(additionalDataFragment) ? additionalDataFragment[0] : get(additionalDataFragment, "definitions[0].typeCondition.name.value");
          var entities = get(data, pluralize(modelName) + ".results", []);
          return React.createElement(WrappedComponent, _extends({}, _this4.props, {
            error: error,
            loading: loading || data.loading,
            entities: entities
          }));
        }
      );
    };

    return WithLoadingComp;
  }(React.Component);
})(function (_Component) {
  _inherits(PostSelectTableInner, _Component);

  function PostSelectTableInner() {
    var _temp3, _this5, _ret2;

    _classCallCheck(this, PostSelectTableInner);

    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return _ret2 = (_temp3 = (_this5 = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this5), _this5.removeColumn = {
      width: 50,
      noEllipsis: true,
      immovable: true,
      type: "action",
      render: function render(v, record) {
        return React.createElement(Button, {
          small: true,
          minimal: true,
          onClick: function onClick(e) {
            e.stopPropagation();
            _this5.removeRecord(record);
          },
          icon: "trash",
          intent: "danger"
        });
      }
    }, _this5.removeRecord = function (record) {
      var _this5$props = _this5.props,
          isMultiSelect = _this5$props.isMultiSelect,
          removeSelection = _this5$props.removeSelection,
          removeEntityFromSelection = _this5$props.removeEntityFromSelection;

      if (isMultiSelect) {
        removeEntityFromSelection(record);
      } else {
        removeSelection();
      }
    }, _temp3), _possibleConstructorReturn(_this5, _ret2);
  }

  PostSelectTableInner.prototype.componentDidMount = function componentDidMount() {
    this.componentDidMountOrUpdate();
  };

  PostSelectTableInner.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
    this.componentDidMountOrUpdate(prevProps);
  };

  PostSelectTableInner.prototype.componentDidMountOrUpdate = function componentDidMountOrUpdate(prevProps) {
    if (!this.props.entities) return;
    var _props3 = this.props,
        isMultiSelect = _props3.isMultiSelect,
        changeGenericSelectValue = _props3.changeGenericSelectValue,
        entities = _props3.entities,
        genericSelectValue = _props3.genericSelectValue,
        _props3$onSelect = _props3.onSelect,
        onSelect = _props3$onSelect === undefined ? noop : _props3$onSelect;

    var hasValue = isMultiSelect ? genericSelectValue && genericSelectValue.length : genericSelectValue;
    var prevEntitiesEqual = prevProps && isEqual(prevProps.entities, entities);
    if ((!prevEntitiesEqual || !hasValue) && entities.length) {
      var toSelect = isMultiSelect ? entities : entities[0];
      changeGenericSelectValue(toSelect);
      onSelect(toSelect);
    }
  };

  PostSelectTableInner.prototype.render = function render() {
    var _props4 = this.props,
        initialEntities = _props4.initialEntities,
        withSelectedTitle = _props4.withSelectedTitle,
        readableName = _props4.readableName,
        loading = _props4.loading,
        entities = _props4.entities,
        postSelectFormName = _props4.postSelectFormName,
        postSelectDTProps = _props4.postSelectDTProps,
        noRemoveButton = _props4.noRemoveButton,
        _props4$buttonProps = _props4.buttonProps,
        buttonProps = _props4$buttonProps === undefined ? {} : _props4$buttonProps;


    var schemaToUse = postSelectDTProps.schema || [];
    if (!noRemoveButton && !buttonProps.disabled) {
      if (Array.isArray(schemaToUse)) {
        schemaToUse = [].concat(schemaToUse, [this.removeColumn]);
      } else {
        schemaToUse = _extends({}, schemaToUse, {
          fields: [].concat(schemaToUse.fields, [this.removeColumn])
        });
      }
    }

    return React.createElement(
      "div",
      { className: "postSelectDataTable", style: { paddingTop: 10 } },
      withSelectedTitle && React.createElement(
        "h6",
        null,
        "Selected ",
        readableName,
        ":"
      ),
      React.createElement(DataTable, _extends({
        formName: postSelectFormName,
        doNotShowEmptyRows: true,
        maxHeight: 400
      }, postSelectDTProps, {
        schema: schemaToUse
        // destroyOnUnmount={false}
        // keepDirtyOnReinitialize
        // enableReinitialize={true}
        // updateUnregisteredFields
        , isLoading: loading,
        entities: entities || initialEntities
      }))
    );
  };

  return PostSelectTableInner;
}(Component));

var GenericSelectInner = compose(branch(function (_ref7) {
  var noDialog = _ref7.noDialog;
  return !noDialog;
}, withDialog({
  enforceFocus: false,
  canOutsideClickClose: false
})), withProps(function (props) {
  var currentValue = props.currentValue,
      asReactSelect = props.asReactSelect,
      idAs = props.idAs;

  if (!asReactSelect && Array.isArray(currentValue) && currentValue.length) {
    // preserve old selection in table
    return {
      initialValues: {
        reduxFormSelectedEntityIdMap: currentValue.reduce(function (acc, entity) {
          acc[entity[idAs]] = { entity: entity };
          return acc;
        }, {})
      }
    };
  }
}))(function (_Component2) {
  _inherits(GenericSelect, _Component2);

  function GenericSelect(props) {
    _classCallCheck(this, GenericSelect);

    var _this6 = _possibleConstructorReturn(this, _Component2.call(this, props));

    _this6.getInnerComponent = function () {
      var _this6$props = _this6.props,
          fragment = _this6$props.fragment,
          passedName = _this6$props.passedName,
          queryOptions = _this6$props.queryOptions,
          tableParamOptions = _this6$props.tableParamOptions,
          isCodeModel = _this6$props.isCodeModel;


      _this6.innerComponent = compose(withTableParams(_extends({
        formName: passedName + "DataTable",
        withSelectedEntities: true,
        noOrderError: true,
        isCodeModel: isCodeModel,
        doNotCoercePageSize: true,
        defaults: {
          order: ["-modified"]
        }
      }, tableParamOptions)), withQuery(fragment, {
        isPlural: true,
        options: queryOptions,
        isCodeModel: isCodeModel
      }))(InnerComp);
    };

    _this6.getInnerComponent();
    return _this6;
  }

  GenericSelect.prototype.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(newProps) {
    var propsToPick = ["fragment", "passedName", "queryOptions", "dialogFooterProps", "tableParamOptions"];
    if (!isEqual(pick(this.props, propsToPick), pick(newProps, propsToPick))) {
      this.getInnerComponent();
    }
  };

  GenericSelect.prototype.render = function render() {
    var ComponentToRender = this.innerComponent;

    return React.createElement(ComponentToRender, this.props);
  };

  return GenericSelect;
}(Component));

var InnerComp = function (_Component3) {
  _inherits(InnerComp, _Component3);

  function InnerComp() {
    var _temp4, _this7, _ret3;

    _classCallCheck(this, InnerComp);

    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    return _ret3 = (_temp4 = (_this7 = _possibleConstructorReturn(this, _Component3.call.apply(_Component3, [this].concat(args))), _this7), _this7.state = {
      reactSelectQueryString: ""
    }, _this7.finishSelection = function (records) {
      var reactSelectQueryString = _this7.state.reactSelectQueryString;
      var handleSelection = _this7.props.handleSelection;

      handleSelection(records, { reactSelectQueryString: reactSelectQueryString });
    }, _this7.onDoubleClick = function (record) {
      var _this7$props = _this7.props,
          hideModal = _this7$props.hideModal,
          isMultiSelect = _this7$props.isMultiSelect;

      if (isMultiSelect) return;
      hideModal && hideModal();
      _this7.finishSelection([record]);
    }, _this7.makeSelection = function () {
      var _this7$props2 = _this7.props,
          hideModal = _this7$props2.hideModal,
          selectedEntities = _this7$props2.selectedEntities;

      _this7.finishSelection(selectedEntities);
      hideModal && hideModal();
    }, _this7.reactSelectHandleLoadMore = function () {
      var _this7$props$tablePar = _this7.props.tableParams,
          setPageSize = _this7$props$tablePar.setPageSize,
          currentParams = _this7$props$tablePar.currentParams,
          defaults = _this7$props$tablePar.defaults;

      setPageSize((currentParams.pageSize || defaults.pageSize) + 25);
    }, _this7.getReactSelectOptions = function () {
      var reactSelectQueryString = _this7.state.reactSelectQueryString;
      var _this7$props3 = _this7.props,
          tableParams = _this7$props3.tableParams,
          input = _this7$props3.input,
          idAs = _this7$props3.idAs,
          _this7$props3$additio = _this7$props3.additionalOptions,
          additionalOptions = _this7$props3$additio === undefined ? [] : _this7$props3$additio;
      var entityCount = tableParams.entityCount,
          schema = tableParams.schema;


      var inputIds = [];
      var inputEntities = [];
      if (input.value) {
        (Array.isArray(input.value) ? input.value : [input.value]).forEach(function (ent) {
          inputIds.push(ent[idAs]);
          inputEntities.push(ent);
        });
      }

      //here we need to append "inputEntities" to our regular list of entities
      //input entities can be initialValues
      //it is important that we spread inputEntities second as the initialValues might not yet be loaded by the default table query
      var entities = [].concat((tableParams.entities || []).filter(function (ent) {
        return !inputIds.includes(ent[idAs]);
      }), inputEntities.map(function (ent) {
        return _extends({}, ent, { __isInputEnt: true });
      }));
      if (!entities.length) return [];
      var lastItem = [];
      if (entityCount > (tableParams.entities || []).length) {
        lastItem.push({
          value: "__LOAD_MORE",
          onClick: function onClick() {
            _this7.reactSelectHandleLoadMore();
            return;
          },
          label: React.createElement(
            "span",
            { className: Classes.TEXT_MUTED, style: { fontStyle: "italic" } },
            "Showing ",
            entities.length,
            " of",
            " ",
            entityCount + additionalOptions.length + entities.length - (tableParams.entities || []).length,
            " ",
            "(Click to load more)"
          )
        });
      }
      var entityOptions = entities.map(function (entity) {
        return _extends({}, pick(entity, ["__isInputEnt", "userCreated"]), {
          clearableValue: entity.clearableValue,
          record: entity,
          value: entity[idAs],
          label: React.createElement(
            "span",
            {
              style: {
                display: "flex",
                justifyContent: "space-between",
                alignItems: "center"
              }
            },
            schema.fields.reduce(function (acc, field, i) {
              var label = field.displayName ? React.createElement(
                "span",
                {
                  className: "tg-value-hide",
                  style: { fontSize: 10, color: "#aaa" }
                },
                field.displayName,
                ":",
                " "
              ) : null;
              var val = get(entity, field.path || field);
              if (field.render) {
                val = field.render(val, entity, undefined, _extends({
                  reactSelectQueryString: reactSelectQueryString
                }, _this7.props, _this7.props.additionalTableProps));
              } else if (field.type === "timestamp") {
                val = val ? moment(val).format("lll") : "";
              } else if (field.type === "boolean") {
                val = val ? "True" : "False";
              }

              var style = void 0;
              if (i > 0) {
                style = {
                  marginLeft: 8,
                  fontSize: 8
                };
              }
              acc.push(React.createElement(
                "span",
                { key: i, style: style },
                label,
                " ",
                val
              ));
              return acc;
            }, [])
          )
        });
      });
      return [].concat(additionalOptions, entityOptions, lastItem);
    }, _this7.handleReactSelectSearchDebounced = debounce(function (val) {
      _this7.props.tableParams.setSearchTerm(val);
    }, 250), _this7.handleReactSelectSearch = function (val) {
      _this7.setState({
        reactSelectQueryString: val
      });
      _this7.handleReactSelectSearchDebounced(val);
      return val; //return val for react-select to work properly
    }, _this7.handleReactSelectFieldSubmit = function (valOrVals) {
      var _this7$props4 = _this7.props,
          input = _this7$props4.input,
          tableParams = _this7$props4.tableParams,
          additionalOptions = _this7$props4.additionalOptions,
          idAs = _this7$props4.idAs;
      //we want to save the entity/entity array itself to the redux form value, not the {label,value} that is passed here

      var entitiesById = keyBy([].concat(tableParams.entities, additionalOptions), idAs);
      if (input.value) {
        if (Array.isArray(input.value)) {
          entitiesById = _extends({}, entitiesById, keyBy(input.value, idAs));
        } else {
          entitiesById[input.value[idAs]] = input.value;
        }
      }
      try {
        if (!valOrVals || valOrVals.length === 0) {
          _this7.finishSelection([]);
        } else {
          var records = (Array.isArray(valOrVals) ? valOrVals : [valOrVals]).map(function (val) {
            var value = val.value,
                userCreated = val.userCreated;

            return userCreated ? val : entitiesById[value];
          });
          _this7.finishSelection(records);
        }
      } catch (error) {
        console.error("errror:", error);
      }
    }, _temp4), _possibleConstructorReturn(_this7, _ret3);
  }

  InnerComp.prototype.render = function render() {
    var _props5 = this.props,
        tableParams = _props5.tableParams,
        hideModal = _props5.hideModal,
        selectedEntities = _props5.selectedEntities,
        isMultiSelect = _props5.isMultiSelect,
        additionalTableProps = _props5.additionalTableProps,
        readableName = _props5.readableName,
        minSelected = _props5.minSelected,
        dialogFooterProps = _props5.dialogFooterProps,
        mustSelect = _props5.mustSelect,
        reactSelectProps = _props5.reactSelectProps,
        passedName = _props5.passedName,
        input = _props5.input,
        idAs = _props5.idAs,
        handlersObj = _props5.handlersObj,
        asReactSelect = _props5.asReactSelect,
        rest = _objectWithoutProperties(_props5, ["tableParams", "hideModal", "selectedEntities", "isMultiSelect", "additionalTableProps", "readableName", "minSelected", "dialogFooterProps", "mustSelect", "reactSelectProps", "passedName", "input", "idAs", "handlersObj", "asReactSelect"]);

    if (handlersObj) {
      handlersObj.refetch = tableParams.onRefresh;
    }
    var disableButton = !selectedEntities.length;
    var minSelectMessage = void 0;
    var mustSelectMessage = void 0;
    if (minSelected && selectedEntities.length < minSelected) {
      minSelectMessage = "Please select at least " + minSelected + " " + pluralize(readableName);
      disableButton = true;
    }
    if (mustSelect && selectedEntities.length !== mustSelect) {
      mustSelectMessage = "Please select " + mustSelect + " " + pluralize(readableName);
      disableButton = true;
    }

    if (asReactSelect) {
      var addValueToEntity = function addValueToEntity(entity) {
        //we need to add a .value field to every entity based on the entities id/code
        return _extends({}, entity, {
          value: entity[idAs]
        });
      };
      var value = isMultiSelect ? !input.value || !input.value.length ? "" : input.value.map(addValueToEntity) : !input.value ? "" : addValueToEntity(input.value);

      return React.createElement(TgSelect, _extends({
        itemListPredicate: function itemListPredicate(queryString, items) {
          var currentValuesByKey = keyBy(value, "value");
          return items.filter(function (item) {
            var value = item.value,
                __isInputEnt = item.__isInputEnt,
                userCreated = item.userCreated;

            if (userCreated || __isInputEnt) return false; //don't show user created option as option to select
            // if (__isInputEnt) {
            //we need to filter it out manually
            // return singleItemPredicate(queryString, item);
            // }
            return !currentValuesByKey[value];
          });
        },
        value: value,
        isLoading: tableParams.isLoading,
        multi: isMultiSelect,
        onChange: this.handleReactSelectFieldSubmit,
        options: this.getReactSelectOptions(),
        onInputChange: this.handleReactSelectSearch,
        name: passedName
      }, reactSelectProps, rest));
    }

    var enhancedChildren = void 0;
    // the enhanced children will get overwritten if passing children to additionalTableProps
    if (additionalTableProps && additionalTableProps.enhancedChildren) {
      enhancedChildren = additionalTableProps.enhancedChildren({ tableParams: tableParams });
    }

    return React.createElement(
      "div",
      null,
      React.createElement(
        "div",
        { style: { marginBottom: 10 } },
        minSelectMessage,
        mustSelectMessage
      ),
      React.createElement(DataTable, _extends({
        withSearch: true,
        withPaging: true,
        doNotShowEmptyRows: true,
        onDoubleClick: this.onDoubleClick,
        withCheckboxes: isMultiSelect,
        isSingleSelect: !isMultiSelect,
        maxHeight: 400
      }, tableParams, {
        children: enhancedChildren
      }, additionalTableProps)),
      React.createElement(DialogFooter, _extends({
        hideModal: hideModal,
        disabled: disableButton,
        onClick: this.makeSelection,
        text: "Select " + (selectedEntities.length > 1 ? pluralize(readableName) : readableName)
      }, dialogFooterProps))
    );
  };

  return InnerComp;
}(Component);