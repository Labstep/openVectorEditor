import React from "react";
import PropTypes from "prop-types";

import Column from "./column/column";
import List from "./list/items_list";
import NoItems from "./items/no_items";
import Search from "./search/search";
import SelectAll from "./items/select_all";
import Item from "./items/item";

var SourceList = function SourceList(_ref) {
  var searchRenderer = _ref.searchRenderer,
      selectAllRenderer = _ref.selectAllRenderer,
      showSearch = _ref.showSearch,
      filterItems = _ref.filterItems,
      searchIcon = _ref.searchIcon,
      messages = _ref.messages,
      showSelectAll = _ref.showSelectAll,
      itemHeight = _ref.itemHeight,
      selectAllHeight = _ref.selectAllHeight,
      selectAllItems = _ref.selectAllItems,
      isAllSelected = _ref.isAllSelected,
      selectedIds = _ref.selectedIds,
      itemRenderer = _ref.itemRenderer,
      getList = _ref.getList,
      filteredItems = _ref.filteredItems,
      calculatedHeight = _ref.calculatedHeight,
      selectItem = _ref.selectItem,
      noItemsRenderer = _ref.noItemsRenderer,
      disabled = _ref.disabled,
      searchValue = _ref.searchValue;

  var SearchRenderer = searchRenderer;
  var SelectAllRenderer = selectAllRenderer;
  return React.createElement(
    Column,
    null,
    showSearch && React.createElement(SearchRenderer, {
      onChange: filterItems,
      searchIcon: searchIcon,
      value: searchValue,
      searchPlaceholder: messages.searchPlaceholder
    }),
    showSelectAll && React.createElement(SelectAllRenderer, {
      height: selectAllHeight ? selectAllHeight : itemHeight,
      onClick: selectAllItems,
      isAllSelected: isAllSelected,
      selectedIds: selectedIds,
      renderer: itemRenderer,
      selectAllMessage: messages.selectAllMessage
    }),
    React.createElement(List, {
      ref: getList,
      offset: 1,
      items: filteredItems,
      itemHeight: itemHeight,
      height: calculatedHeight,
      onClick: selectItem,
      selectedIds: selectedIds,
      renderer: itemRenderer,
      noItemsRenderer: noItemsRenderer,
      noItemsMessage: messages.noItemsMessage,
      disabled: disabled,
      disabledItemsTooltip: messages.disabledItemsTooltip
    })
  );
};

SourceList.propTypes = process.env.NODE_ENV !== "production" ? {
  searchRenderer: PropTypes.any,
  selectAllRenderer: PropTypes.any,
  noItemsRenderer: PropTypes.any,
  itemRenderer: PropTypes.any,
  searchIcon: PropTypes.any,
  showSearch: PropTypes.bool,
  showSelectAll: PropTypes.bool,
  isAllSelected: PropTypes.bool,
  filterItems: PropTypes.func,
  messages: PropTypes.object,
  itemHeight: PropTypes.number,
  selectAllHeight: PropTypes.number,
  calculatedHeight: PropTypes.number,
  filteredItems: PropTypes.array,
  selectedIds: PropTypes.arrayOf(PropTypes.number),
  selectAllItems: PropTypes.func,
  getList: PropTypes.func,
  selectItem: PropTypes.func,
  disabled: PropTypes.bool
} : {};

SourceList.defaultProps = {
  searchRenderer: Search,
  selectAllRenderer: SelectAll,
  noItemsRenderer: NoItems,
  itemRenderer: Item,
  showSearch: true,
  showSelectAll: true,
  isAllSelected: false,
  calculatedHeight: 400,
  itemHeight: 40,
  selectedIds: [],
  filteredItems: [],
  messages: {},
  disabled: false
};

export default SourceList;