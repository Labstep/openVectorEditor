function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* Copyright (C) 2018 TeselaGen Biotechnology, Inc. */

import React from "react";
import PropTypes from "prop-types";

import "./style.css";

/* NOTE taken from lims */
/* TODO export this and import it from the apps */

var RecordInfoTable = function (_React$Component) {
  _inherits(RecordInfoTable, _React$Component);

  function RecordInfoTable() {
    _classCallCheck(this, RecordInfoTable);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  RecordInfoTable.prototype.render = function render() {
    var sections = this.props.sections;

    var rows = [];
    sections.forEach(function (recordInfoSection) {
      recordInfoSection.forEach(function (labelAndValue, i) {
        if (!labelAndValue) return;
        var label = labelAndValue[0],
            value = labelAndValue[1];

        rows.push(React.createElement(
          "tr",
          { key: label, className: i === 0 ? "section-start" : "" },
          React.createElement(
            "td",
            null,
            label
          ),
          React.createElement(
            "td",
            null,
            value
          )
        ));
      });
    });

    return React.createElement(
      "table",
      { className: "record-info-table" },
      React.createElement(
        "tbody",
        null,
        rows
      )
    );
  };

  return RecordInfoTable;
}(React.Component);

RecordInfoTable.propTypes = process.env.NODE_ENV !== "production" ? {
  /**
   * Array of columns we want to render. Each column is an array of 2-tuples. The
   * first element in the 2-tuple is the label and the second element is the value.
   */
  sections: PropTypes.arrayOf(PropTypes.array).isRequired
} : {};


export default RecordInfoTable;