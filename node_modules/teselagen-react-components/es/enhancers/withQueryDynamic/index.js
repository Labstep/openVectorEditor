var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

import { Query } from "react-apollo";
import { get, upperFirst, camelCase, isEmpty, isFunction, keyBy } from "lodash";
import React from "react";
import deepEqual from "deep-equal";
import pluralize from "pluralize";
import generateQuery from "../../utils/generateQuery";
import generateFragmentWithFields from "../../utils/generateFragmentWithFields";
import Loading from "../../Loading";

/**
 * withQuery
 * @param {gql fragment} fragment supply a fragment as the first argument
 * @param {options} options
 * @typedef {object} options
 * @property {boolean} isPlural Are we searching for 1 thing or many?
 * @property {string} queryName What the props come back on ( by default = modelName + 'Query')
 * @property {boolean} asFunction If true, this gives you back a function you can call directly instead of a HOC
 * @property {boolean} asQueryObj If true, this gives you back the gql query object aka gql`query myQuery () {}`
 * @property {string} idAs By default single record queries occur on an id. But, if the record doesn't have an id field, and instead has a 'code', you can set idAs: 'code'
 * @property {boolean} getIdFromParams Grab the id variable off the match.params object being passed in!
 * @property {boolean || string} showLoading Show a loading spinner over the whole component while the data is loading
 * @property {boolean} showError Default=true show an error message toastr if the an error occurs while loading the data
 * @return {props}: {xxxxQuery, data }
 */

export default function withQuery(__inputFragment, maybeOptions) {
  var _inputFragment = __inputFragment;
  var options = maybeOptions || {};
  if (_inputFragment && !_inputFragment.kind && !Array.isArray(_inputFragment) && !maybeOptions) {
    options = _inputFragment;
    _inputFragment = undefined;
  }

  var _options = options,
      asQueryObj = _options.asQueryObj,
      asFunction = _options.asFunction;


  var inputFragment = _inputFragment;

  if (asFunction || asQueryObj) {
    return getAsFnOrQueryHelper(inputFragment, options);
  }

  var fragment = void 0,
      gqlQuery = void 0;
  // make this out here if possible because query
  // will rerun too much
  if (inputFragment) {
    fragment = Array.isArray(inputFragment) ? generateFragmentWithFields.apply(undefined, inputFragment) : inputFragment;
    gqlQuery = generateQuery(fragment, options);
  }

  return function (Component) {
    return function (props) {
      // runTimeQueryOptions are used to override query options by passing them
      // directly to the component wrapped with withQuery
      var runTimeQueryOptions = props.runTimeQueryOptions,
          componentProps = _objectWithoutProperties(props, ["runTimeQueryOptions"]);

      var mergedOpts = getMergedOpts(options, runTimeQueryOptions);

      var isPlural = mergedOpts.isPlural,
          asFunction = mergedOpts.asFunction,
          asQueryObj = mergedOpts.asQueryObj,
          _mergedOpts$LoadingCo = mergedOpts.LoadingComp,
          LoadingComp = _mergedOpts$LoadingCo === undefined ? Loading : _mergedOpts$LoadingCo,
          nameOverride = mergedOpts.nameOverride,
          client = mergedOpts.client,
          variables = mergedOpts.variables,
          mapQueryProps = mergedOpts.props,
          queryName = mergedOpts.queryName,
          getIdFromParams = mergedOpts.getIdFromParams,
          showLoading = mergedOpts.showLoading,
          inDialog = mergedOpts.inDialog,
          _fragment = mergedOpts.fragment,
          _mergedOpts$showError = mergedOpts.showError,
          showError = _mergedOpts$showError === undefined ? true : _mergedOpts$showError,
          queryOptions = mergedOpts.options,
          skipQueryFn = mergedOpts.skip,
          rest = _objectWithoutProperties(mergedOpts, ["isPlural", "asFunction", "asQueryObj", "LoadingComp", "nameOverride", "client", "variables", "props", "queryName", "getIdFromParams", "showLoading", "inDialog", "fragment", "showError", "options", "skip"]);

      var _componentProps$optio = _extends({}, componentProps, options, runTimeQueryOptions),
          propVariables = _componentProps$optio.variables,
          fetchPolicy = _componentProps$optio.fetchPolicy,
          pollInterval = _componentProps$optio.pollInterval,
          notifyOnNetworkStatusChange = _componentProps$optio.notifyOnNetworkStatusChange;

      // if it is dynamic then these options will be used


      if (runTimeQueryOptions) {
        var _inputFragment2 = _fragment || _inputFragment;
        fragment = Array.isArray(_fragment) ? generateFragmentWithFields.apply(undefined, _fragment) : _inputFragment2;
        gqlQuery = generateQuery(fragment, options);
      }

      var modelName = get(fragment, "definitions[0].typeCondition.name.value");
      var nameToUse = nameOverride || (isPlural ? pluralize(modelName) : modelName);
      var queryNameToUse = queryName || nameToUse + "Query";

      var id = void 0;
      if (getIdFromParams) {
        id = parseInt(get(props, "match.params.id"), 10);
        if (!id) {
          console.error("There needs to be an id passed here to ", queryNameToUse, "but none was found");
          /* eslint-disable */
          debugger;
          /* eslint-enable */
        }
      }

      var shouldSkipQuery = false;
      if (skipQueryFn) {
        shouldSkipQuery = skipQueryFn(componentProps);
      }

      var extraOptions = queryOptions || {};
      if (typeof queryOptions === "function") {
        extraOptions = queryOptions(props) || {};
      }

      var _extraOptions = extraOptions,
          extraOptionVariables = _extraOptions.variables,
          otherExtraOptions = _objectWithoutProperties(_extraOptions, ["variables"]);

      var variablesToUse = getVariables(props, propVariables, extraOptionVariables, _extends({}, options, {
        queryNameToUse: queryNameToUse
      }));

      if (get(variablesToUse, "filter.entity") && get(variablesToUse, "filter.entity") !== modelName) {
        console.error("filter model does not match fragment model!");
      }

      return React.createElement(
        Query,
        _extends({
          query: gqlQuery
        }, !isEmpty(variablesToUse) && { variables: variablesToUse }, {
          fetchPolicy: fetchPolicy || "network-only",
          ssr: false,
          pollInterval: pollInterval,
          notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,
          skip: shouldSkipQuery
        }, otherExtraOptions, rest),
        function (_ref) {
          var _data = _ref.data,
              queryProps = _objectWithoutProperties(_ref, ["data"]);

          var allPropsForComponent = componentProps,
              newData = void 0;
          if (!shouldSkipQuery) {
            var _extends2, _extends3;

            var data = _extends({}, _data, queryProps);

            var results = get(data, nameToUse + (isPlural ? ".results" : ""));
            var tableParams = componentProps.tableParams;

            var totalResults = isPlural ? get(data, nameToUse + ".totalResults", 0) : results && 1;

            newData = _extends({}, data, (_extends2 = {
              totalResults: totalResults,
              //adding these for consistency with withItemsQuery
              entities: results,
              entityCount: totalResults
            }, _extends2["error" + upperFirst(nameToUse)] = data.error, _extends2["loading" + upperFirst(nameToUse)] = data.loading, _extends2));

            data.loading = data.loading || data.networkStatus === 4;

            var newTableParams = void 0;
            if (tableParams && !tableParams.entities && !tableParams.isLoading) {
              var entities = results;

              newTableParams = _extends({}, tableParams, {
                isLoading: data.loading,
                entities: entities,
                entityCount: totalResults,
                onRefresh: data.refetch,
                variables: variablesToUse,
                fragment: fragment
              });
            }

            var propsToReturn = _extends({}, newTableParams && { tableParams: newTableParams }, (_extends3 = {
              data: newData
            }, _extends3[queryNameToUse] = newData, _extends3[nameToUse] = results, _extends3[nameToUse + "Error"] = data.error, _extends3[nameToUse + "Loading"] = data.loading, _extends3[nameToUse + "Count"] = totalResults, _extends3[camelCase("refetch_" + nameToUse)] = data.refetch, _extends3.fragment = fragment, _extends3.gqlQuery = gqlQuery, _extends3));

            if (data.loading && showLoading) {
              var bounce = inDialog || showLoading === "bounce";
              return React.createElement(LoadingComp, { inDialog: inDialog, bounce: bounce });
            }

            allPropsForComponent = _extends({}, componentProps, propsToReturn);

            if (isFunction(mapQueryProps)) {
              allPropsForComponent = _extends({}, allPropsForComponent, mapQueryProps(allPropsForComponent));
            }
          }

          return React.createElement(ComponentHelper, {
            Component: Component,
            showError: showError,
            data: newData,
            queryNameToUse: queryNameToUse,
            componentProps: allPropsForComponent
          });
        }
      );
    };
  };
}

function getMergedOpts(topLevelOptions, runTimeQueryOptions) {
  return _extends({}, topLevelOptions, runTimeQueryOptions);
}

function getVariables(ownProps, propVariables, extraOptionVariables, options) {
  var getIdFromParams = options.getIdFromParams,
      queryNameToUse = options.queryNameToUse,
      variables = options.variables;

  var id = void 0;
  if (getIdFromParams) {
    id = parseInt(get(ownProps, "match.params.id"), 10);
    if (!id) {
      console.error("There needs to be an id passed here to ", queryNameToUse, "but none was found");
      debugger; // eslint-disable-line
      // to prevent crash
      id = -1;
    }
  }

  return _extends({}, getIdFromParams && { id: id }, variables, propVariables, extraOptionVariables && extraOptionVariables);
}

var ComponentHelper = function (_React$Component) {
  _inherits(ComponentHelper, _React$Component);

  function ComponentHelper() {
    var _temp, _this, _ret;

    _classCallCheck(this, ComponentHelper);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.selectTableRecords = function (ids, keepOldEntities) {
      var _this$props$component = _this.props.componentProps.tableParams,
          entities = _this$props$component.entities,
          selectedEntities = _this$props$component.selectedEntities,
          changeFormValue = _this$props$component.changeFormValue;

      setTimeout(function () {
        var key = get(entities, "[0].code") ? "code" : "id";

        var entitiesById = keyBy(entities, key);
        var newIdMap = _extends({}, keepOldEntities && selectedEntities);
        ids.forEach(function (id) {
          var entity = entitiesById[id];
          if (!entity) return;
          newIdMap[id] = {
            entity: entity
          };
        });
        changeFormValue("reduxFormSelectedEntityIdMap", newIdMap);
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  ComponentHelper.prototype.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(nextProps) {
    var _props = this.props,
        showError = _props.showError,
        data = _props.data,
        loggedIn = _props.loggedIn,
        queryNameToUse = _props.queryNameToUse;

    if (showError && nextProps.data && data && !deepEqual(nextProps.data.error, data.error)) {
      var error = nextProps.data.error;
      if (loggedIn) {
        console.error("error:", error);
        window.toastr.error("Error loading " + queryNameToUse);
      } else {
        console.warn("Error supressed, not logged in");
      }
    }
  };

  ComponentHelper.prototype.render = function render() {
    var _props2 = this.props,
        Component = _props2.Component,
        componentProps = _props2.componentProps;

    var extraProps = {};
    if (componentProps.tableParams) {
      extraProps.selectTableRecords = this.selectTableRecords;
    }
    return React.createElement(Component, _extends({}, componentProps, extraProps));
  };

  return ComponentHelper;
}(React.Component);

function getAsFnOrQueryHelper(fragment, options) {
  var asQueryObj = options.asQueryObj,
      asFunction = options.asFunction,
      isPlural = options.isPlural,
      nameOverride = options.nameOverride,
      client = options.client,
      queryOptions = options.options,
      variables = options.variables;


  var gqlQuery = generateQuery(fragment, options);
  var modelName = Array.isArray(fragment) ? fragment[0] : get(fragment, "definitions[0].typeCondition.name.value");
  var nameToUse = nameOverride || (isPlural ? pluralize(modelName) : modelName);

  if (asQueryObj) {
    return gqlQuery;
  }
  if (asFunction) {
    if (!client) {
      return console.error("You need to pass the apollo client to withQuery if using as a function");
    }

    return function query(localVars) {
      return client.query(_extends({
        query: gqlQuery,
        ssr: false,
        fetchPolicy: "network-only"
      }, queryOptions, {
        variables: localVars || variables || queryOptions && queryOptions.variables || undefined
      })).then(function (res) {
        var toReturn = void 0;
        if (isPlural) {
          toReturn = [].concat(res.data[nameToUse].results);
          toReturn.totalResults = res.data[nameToUse].totalResults;
        } else {
          toReturn = res.data[nameToUse];
        }
        return toReturn;
      });
    };
  }
}