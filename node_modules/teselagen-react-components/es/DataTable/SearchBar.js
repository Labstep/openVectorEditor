var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

import React from "react";
import { Button, Classes, Spinner } from "@blueprintjs/core";
import classNames from "classnames";
import { onEnterHelper } from "../utils/handlerHelpers";
import { InputField } from "../FormComponents";

var SearchBar = function SearchBar(_ref) {
  var reduxFormSearchInput = _ref.reduxFormSearchInput,
      setSearchTerm = _ref.setSearchTerm,
      loading = _ref.loading,
      searchMenuButton = _ref.searchMenuButton,
      disabled = _ref.disabled;

  return React.createElement(InputField, _extends({
    autoFocus: true,
    disabled: disabled,
    loading: loading,
    type: "search",
    name: "reduxFormSearchInput",
    className: classNames("datatable-search-input", Classes.ROUND),
    placeholder: "Search..."
  }, onEnterHelper(function (e) {
    e.preventDefault();
    setSearchTerm(reduxFormSearchInput);
  }), {
    rightElement: loading ? React.createElement(Spinner, { size: "18" }) : searchMenuButton || React.createElement(Button, {
      minimal: true,
      icon: "search",
      onClick: function onClick() {
        setSearchTerm(reduxFormSearchInput);
      }
    })
  }));
};

export default SearchBar;