var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

import React, { useEffect, useState } from "react";
import { Button } from "@blueprintjs/core";
import { Transition } from "react-transition-group";

var duration = 300;

var defaultStyle = {
  transition: "opacity " + duration + "ms ease-in-out",
  opacity: 0
};

var transitionStyles = {
  entering: { opacity: 1 },
  entered: { opacity: 1 },
  exiting: { opacity: 0 },
  exited: { opacity: 0 }
};

function ScrollToTop(_ref) {
  var _ref$showAt = _ref.showAt,
      showAt = _ref$showAt === undefined ? 150 : _ref$showAt,
      _ref$scrollContainer = _ref.scrollContainer,
      scrollContainer = _ref$scrollContainer === undefined ? document.scrollingElement : _ref$scrollContainer;

  var _useState = useState(scrollContainer.scrollTop >= showAt),
      shouldShow = _useState[0],
      setShouldShow = _useState[1];

  useEffect(function () {
    var scrollListener = function scrollListener() {
      var newShouldShow = scrollContainer.scrollTop >= showAt;
      if (newShouldShow !== shouldShow) setShouldShow(newShouldShow);
    };
    var listenerContainer = scrollContainer === document.scrollingElement ? window : scrollContainer;
    listenerContainer.addEventListener("scroll", scrollListener);
    // Specify how to clean up after this effect:
    return function cleanup() {
      listenerContainer.removeEventListener("scroll", scrollListener);
    };
  }, [shouldShow, showAt, scrollContainer]);

  var scrollToTop = function scrollToTop() {
    var c = scrollContainer.scrollTop;
    if (c > 0) {
      window.requestAnimationFrame(scrollToTop);
      scrollContainer.scrollTo(0, c - c / 8);
    }
  };

  return React.createElement(
    Transition,
    { "in": shouldShow, timeout: duration },
    function (state) {
      return state === "exited" ? null : React.createElement(
        "div",
        { style: { position: "fixed", bottom: 25, right: 25, zIndex: 10 } },
        React.createElement(Button, {
          style: _extends({
            borderRadius: "50%"
          }, defaultStyle, transitionStyles[state]),
          intent: "primary",
          icon: "arrow-up",
          large: true,
          onClick: scrollToTop
        })
      );
    }
  );
}

export default ScrollToTop;