function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from "react";
import PropTypes from "prop-types";
import "./style.css";

var Timeline = function (_Component) {
  _inherits(Timeline, _Component);

  function Timeline() {
    _classCallCheck(this, Timeline);

    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  Timeline.prototype.render = function render() {
    return React.createElement(
      "div",
      { className: "tg-timeline" },
      this.props.children.length > 1 && React.createElement("div", { className: "tg-timeline-line" }),
      this.props.children
    );
  };

  return Timeline;
}(Component);

Timeline.propTypes = process.env.NODE_ENV !== "production" ? {
  children: PropTypes.arrayOf(PropTypes.element)
} : {};


export { default as TimelineEvent } from "./TimelineEvent";

export default Timeline;